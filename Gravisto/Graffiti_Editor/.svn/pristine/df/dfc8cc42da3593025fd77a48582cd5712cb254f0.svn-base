/* Generated By:JJTree&JavaCC: Do not edit this line. DOTParser.java */

package org.graffiti.plugins.ios.importers.dot.parser;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Enumeration;
import java.util.Vector;

public class DOTParser/* @bgen(jjtree) */implements DOTParserTreeConstants,
        DOTParserConstants {/* @bgen(jjtree) */
    protected JJTDOTParserState jjtree = new JJTDOTParserState();

    public static void parseDot(Reader r) throws IOException, ParseException {
        new DOTParser(r).parse().dump(" ");
    }

    public static void main(String[] args) throws Exception {
        parseDot(new FileReader(args[0]));
    }

    /*
     * ==========================================================================
     * ================= DOT Grammar starts here
     * ================================
     * ===========================================================
     */
    @SuppressWarnings("finally")
    final public SimpleNode parse() throws ParseException {
        /* @bgen(jjtree) parse */
        ASTparse jjtn000 = new ASTparse(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            graph();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
            return jjtn000;
        }
        // throw new Error("Missing return statement in function");
    }

    final public void graph() throws ParseException {
        /* @bgen(jjtree) graph */
        ASTgraph jjtn000 = new ASTgraph(JJTGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STRICT:
                jj_consume_token(STRICT);
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case GRAPH:
                jj_consume_token(GRAPH);
                break;
            case DIGRAPH:
                jj_consume_token(DIGRAPH);
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(ID);
            jj_consume_token(LBRACE);
            stmt_list();
            jj_consume_token(RBRACE);
            jj_consume_token(0);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void stmt_list() throws ParseException {
        /* @bgen(jjtree) stmt_list */
        ASTstmt_list jjtn000 = new ASTstmt_list(JJTSTMT_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            stmt();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[2] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE:
            case GRAPH:
            case NODE:
            case SUBGRAPH:
            case LBRACE:
            case ID:
                stmt_list();
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void stmt() throws ParseException {
        /* @bgen(jjtree) Statement */
        ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            if (jj_2_1(2147483647)) {
                edge_stmt();
            } else if (jj_2_2(2)) {
                subgraph();
            } else if (jj_2_3(2)) {
                ideq_stmt();
            } else if (jj_2_4(2)) {
                attr_stmt();
            } else if (jj_2_5(2)) {
                node_stmt();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void ideq_stmt() throws ParseException {
        /* @bgen(jjtree) ideq_stmt */
        ASTideq_stmt jjtn000 = new ASTideq_stmt(JJTIDEQ_STMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            jj_consume_token(ID);
            jj_consume_token(EQ);
            jj_consume_token(ID);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void attr_stmt() throws ParseException {
        /* @bgen(jjtree) attr_stmt */
        ASTattr_stmt jjtn000 = new ASTattr_stmt(JJTATTR_STMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case GRAPH:
                jj_consume_token(GRAPH);
                break;
            case NODE:
                jj_consume_token(NODE);
                break;
            case EDGE:
                jj_consume_token(EDGE);
                break;
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            attr_list();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void node_stmt() throws ParseException {
        /* @bgen(jjtree) node_stmt */
        ASTnode_stmt jjtn000 = new ASTnode_stmt(JJTNODE_STMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            node_id();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACKET:
                attr_list();
                break;
            default:
                jj_la1[5] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void node_id() throws ParseException {
        /* @bgen(jjtree) node_id */
        ASTnode_id jjtn000 = new ASTnode_id(JJTNODE_ID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            jj_consume_token(ID);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void edge_stmt() throws ParseException {
        /* @bgen(jjtree) edge_stmt */
        ASTedge_stmt jjtn000 = new ASTedge_stmt(JJTEDGE_STMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                node_id();
                break;
            case SUBGRAPH:
            case LBRACE:
                subgraph();
                break;
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            edgeRHS();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACKET:
                attr_list();
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void subgraph() throws ParseException {
        /* @bgen(jjtree) subgraph */
        ASTsubgraph jjtn000 = new ASTsubgraph(JJTSUBGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            if (jj_2_6(2)) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUBGRAPH:
                    jj_consume_token(SUBGRAPH);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ID:
                        jj_consume_token(ID);
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        ;
                    }
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    ;
                }
                jj_consume_token(LBRACE);
                stmt_list();
                jj_consume_token(RBRACE);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUBGRAPH:
                    jj_consume_token(SUBGRAPH);
                    jj_consume_token(ID);
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void edgeRHS() throws ParseException {
        /* @bgen(jjtree) edgeRHS */
        ASTedgeRHS jjtn000 = new ASTedgeRHS(JJTEDGERHS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            edgeop();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                node_id();
                break;
            case SUBGRAPH:
            case LBRACE:
                subgraph();
                break;
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE_UNDIRECTED:
            case EDGE_DIRECTED:
                edgeRHS();
                break;
            default:
                jj_la1[12] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void edgeop() throws ParseException {
        /* @bgen(jjtree) edgeop */
        ASTedgeop jjtn000 = new ASTedgeop(JJTEDGEOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE_UNDIRECTED:
                jj_consume_token(EDGE_UNDIRECTED);
                break;
            case EDGE_DIRECTED:
                jj_consume_token(EDGE_DIRECTED);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void attr_list() throws ParseException {
        /* @bgen(jjtree) attr_list */
        ASTattr_list jjtn000 = new ASTattr_list(JJTATTR_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            jj_consume_token(LBRACKET);
            a_list();
            jj_consume_token(RBRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final public void a_list() throws ParseException {
        /* @bgen(jjtree) a_list */
        ASTa_list jjtn000 = new ASTa_list(JJTA_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EQ:
                jj_consume_token(EQ);
                jj_consume_token(ID);
                break;
            default:
                jj_la1[14] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                a_list();
                break;
            default:
                jj_la1[16] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    final private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    final private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    final private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    final private boolean jj_3R_19() {
        if (jj_3R_2())
            return true;
        return false;
    }

    final private boolean jj_3R_22() {
        if (jj_scan_token(ID))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(24)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_24()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    final private boolean jj_3R_11() {
        if (jj_3R_13())
            return true;
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_3R_3())
            return true;
        return false;
    }

    final private boolean jj_3R_13() {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_3R_22())
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    final private boolean jj_3R_18() {
        if (jj_3R_14())
            return true;
        return false;
    }

    final private boolean jj_3R_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(20)) {
            jj_scanpos = xsp;
            if (jj_scan_token(21))
                return true;
        }
        return false;
    }

    final private boolean jj_3R_10() {
        if (jj_3R_17())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_18()) {
            jj_scanpos = xsp;
            if (jj_3R_19())
                return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_20()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    final private boolean jj_3R_6() {
        if (jj_scan_token(SUBGRAPH))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(26)) {
            jj_scanpos = xsp;
        }
        return false;
    }

    final private boolean jj_3R_12() {
        if (jj_scan_token(SUBGRAPH))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    final private boolean jj_3R_9() {
        if (jj_3R_2())
            return true;
        return false;
    }

    final private boolean jj_3_6() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_6()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(LBRACE))
            return true;
        if (jj_3R_7())
            return true;
        if (jj_scan_token(RBRACE))
            return true;
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_3R_2())
            return true;
        return false;
    }

    final private boolean jj_3R_2() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_6()) {
            jj_scanpos = xsp;
            if (jj_3R_12())
                return true;
        }
        return false;
    }

    final private boolean jj_3R_8() {
        if (jj_3R_14())
            return true;
        return false;
    }

    final private boolean jj_3R_1() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_8()) {
            jj_scanpos = xsp;
            if (jj_3R_9())
                return true;
        }
        if (jj_3R_10())
            return true;
        xsp = jj_scanpos;
        if (jj_3R_11()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    final private boolean jj_3R_15() {
        if (jj_3R_13())
            return true;
        return false;
    }

    final private boolean jj_3R_14() {
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    final private boolean jj_3_5() {
        if (jj_3R_5())
            return true;
        return false;
    }

    final private boolean jj_3R_5() {
        if (jj_3R_14())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_15()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    final private boolean jj_3R_25() {
        if (jj_3R_7())
            return true;
        return false;
    }

    final private boolean jj_3R_4() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(13)) {
            jj_scanpos = xsp;
            if (jj_scan_token(14)) {
                jj_scanpos = xsp;
                if (jj_scan_token(12))
                    return true;
            }
        }
        if (jj_3R_13())
            return true;
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_3R_1())
            return true;
        return false;
    }

    final private boolean jj_3R_3() {
        if (jj_scan_token(ID))
            return true;
        if (jj_scan_token(EQ))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    final private boolean jj_3R_24() {
        if (jj_3R_22())
            return true;
        return false;
    }

    final private boolean jj_3R_21() {
        if (jj_3R_1())
            return true;
        return false;
    }

    final private boolean jj_3R_16() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_21()) {
            jj_scanpos = xsp;
            if (jj_3_2()) {
                jj_scanpos = xsp;
                if (jj_3_3()) {
                    jj_scanpos = xsp;
                    if (jj_3_4()) {
                        jj_scanpos = xsp;
                        if (jj_3_5())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    final private boolean jj_3_4() {
        if (jj_3R_4())
            return true;
        return false;
    }

    final private boolean jj_3R_7() {
        if (jj_3R_16())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(25)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_25()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    final private boolean jj_3R_20() {
        if (jj_3R_10())
            return true;
        return false;
    }

    final private boolean jj_3R_23() {
        if (jj_scan_token(EQ))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    public DOTParserTokenManager token_source;

    SimpleCharStream jj_input_stream;

    public Token token, jj_nt;

    private int jj_ntk;

    private Token jj_scanpos, jj_lastpos;

    private int jj_la;

    public boolean lookingAhead = false;

    // private boolean jj_semLA;

    private int jj_gen;

    final private int[] jj_la1 = new int[17];

    static private int[] jj_la1_0;

    static private int[] jj_la1_1;
    static {
        jj_la1_0();
        jj_la1_1();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[] { 0x8000, 0x2800, 0x2000000, 0x4057000, 0x7000,
                0x400000, 0x4050000, 0x400000, 0x4000000, 0x10000, 0x10000,
                0x4050000, 0x300000, 0x300000, 0x20000, 0x1000000, 0x4000000, };
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[6];

    private boolean jj_rescan = false;

    private int jj_gc = 0;

    public DOTParser(java.io.InputStream stream) {
        this(stream, null);
    }

    public DOTParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new DOTParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 17; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 17; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public DOTParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new DOTParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 17; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 17; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public DOTParser(DOTParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 17; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(DOTParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 17; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {

        /**
         * 
         */
        private static final long serialVersionUID = -8802711414889695249L;
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
                        .getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private Vector<Object> jj_expentries = new Vector<Object>();

    private int[] jj_expentry;

    private int jj_kind = -1;

    private int[] jj_lasttokens = new int[100];

    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (Enumeration<Object> e = jj_expentries.elements(); e
                    .hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) {
                        break;
                    }
                }
            }
            if (!exists) {
                jj_expentries.addElement(jj_expentry);
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[40];
        for (int i = 0; i < 40; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 17; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 40; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 6; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;

        Token first;

        int arg;

        JJCalls next;
    }

    void jjtreeOpenNodeScope(Node node) {
        ((SimpleNode) node).first_token = getToken(1);
    }

    void jjtreeCloseNodeScope(Node node) {
        ((SimpleNode) node).last_token = getToken(0);
    }

}
