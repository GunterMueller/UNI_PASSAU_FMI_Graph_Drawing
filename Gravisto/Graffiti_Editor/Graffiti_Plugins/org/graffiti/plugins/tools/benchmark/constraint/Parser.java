//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 20 20:11:45 CEST 2009
//----------------------------------------------------

package org.graffiti.plugins.tools.benchmark.constraint;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Sat Jun 20 20:11:45 CEST 2009
 */
public class Parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\021\000\002\003\005\000\002\002\004\000\002\003"
            + "\005\000\002\003\005\000\002\003\005\000\002\003\005"
            + "\000\002\003\005\000\002\003\004\000\002\003\005\000"
            + "\002\003\005\000\002\003\005\000\002\003\005\000\002"
            + "\003\005\000\002\003\005\000\002\003\007\000\002\004"
            + "\003\000\002\004\005" });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\046\000\010\004\006\014\005\026\004\001\002\000"
            + "\020\016\026\017\034\020\030\021\033\022\031\023\032"
            + "\025\027\001\002\000\010\004\006\014\005\026\004\001"
            + "\002\000\010\004\006\014\005\026\004\001\002\000\016"
            + "\002\015\010\012\011\014\012\013\013\010\015\011\001"
            + "\002\000\010\004\006\014\005\026\004\001\002\000\010"
            + "\004\006\014\005\026\004\001\002\000\010\004\006\014"
            + "\005\026\004\001\002\000\010\004\006\014\005\026\004"
            + "\001\002\000\010\004\006\014\005\026\004\001\002\000"
            + "\004\002\000\001\002\000\020\002\ufff8\005\ufff8\010\ufff8"
            + "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\001\002\000\020\002"
            + "\ufff6\005\ufff6\010\012\011\014\012\ufff6\013\ufff6\015\011"
            + "\001\002\000\020\002\ufff9\005\ufff9\010\ufff9\011\ufff9\012"
            + "\ufff9\013\ufff9\015\ufff9\001\002\000\020\002\ufff7\005\ufff7"
            + "\010\012\011\014\012\ufff7\013\ufff7\015\ufff7\001\002\000"
            + "\020\002\ufff5\005\ufff5\010\012\011\014\012\ufff5\013\ufff5"
            + "\015\011\001\002\000\016\005\024\010\012\011\014\012"
            + "\013\013\010\015\011\001\002\000\020\002\ufff4\005\ufff4"
            + "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\001\002\000"
            + "\020\002\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa"
            + "\015\ufffa\001\002\000\004\026\050\001\002\000\004\006"
            + "\042\001\002\000\004\026\041\001\002\000\004\026\040"
            + "\001\002\000\004\026\037\001\002\000\004\026\036\001"
            + "\002\000\004\026\035\001\002\000\020\002\uffff\005\uffff"
            + "\010\uffff\011\uffff\012\uffff\013\uffff\015\uffff\001\002\000"
            + "\020\002\ufffd\005\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd"
            + "\015\ufffd\001\002\000\020\002\ufffb\005\ufffb\010\ufffb\011"
            + "\ufffb\012\ufffb\013\ufffb\015\ufffb\001\002\000\020\002\ufffc"
            + "\005\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\001"
            + "\002\000\020\002\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe"
            + "\013\ufffe\015\ufffe\001\002\000\004\026\043\001\002\000"
            + "\006\007\ufff2\024\ufff2\001\002\000\006\007\046\024\045"
            + "\001\002\000\004\026\047\001\002\000\020\002\ufff3\005"
            + "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\001\002"
            + "\000\006\007\ufff1\024\ufff1\001\002\000\020\002\001\005"
            + "\001\010\001\011\001\012\001\013\001\015\001\001\002" + "" });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\046\000\004\003\006\001\001\000\002\001\001\000"
            + "\004\003\024\001\001\000\004\003\022\001\001\000\002"
            + "\001\001\000\004\003\021\001\001\000\004\003\020\001"
            + "\001\000\004\003\017\001\001\000\004\003\016\001\001"
            + "\000\004\003\015\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\004\004\043\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    @SuppressWarnings("unchecked")
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }

}

/** Cup generated class to encapsulate user supplied action code. */
@SuppressWarnings( { "unchecked", "unused" })
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 16: // list ::= list KOMMA STRING
        {
            StringSet RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            StringSet a = (StringSet) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            a.add(b);
            RESULT = a;
            CUP$Parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 15: // list ::= STRING
        {
            StringSet RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new StringSet(a);
            CUP$Parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 14: // formula ::= STRING IN LSETPAREN list RSETPAREN
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 4)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 4)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 4)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).right;
            StringSet b = (StringSet) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = new AtomicConstraints.SetConstraint(a, b.get());
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 4)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // formula ::= LPAREN formula RPAREN
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = a;
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // formula ::= formula EQUIV formula
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            Constraint b = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new LogicConstraints.Equiv(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // formula ::= formula XOR formula
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            Constraint b = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new LogicConstraints.Xor(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // formula ::= formula IMPLIES formula
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            Constraint b = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new LogicConstraints.Implies(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // formula ::= formula OR formula
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            Constraint b = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new LogicConstraints.Or(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // formula ::= formula AND formula
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            Constraint b = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new LogicConstraints.And(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // formula ::= NOT formula
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            Constraint a = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new LogicConstraints.Not(a);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // formula ::= STRING GEQ STRING
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AtomicConstraints.GreaterThanOrEqual(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // formula ::= STRING GT STRING
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AtomicConstraints.GreaterThan(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // formula ::= STRING LEQ STRING
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AtomicConstraints.LessThanOrEqual(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // formula ::= STRING LT STRING
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AtomicConstraints.LessThan(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // formula ::= STRING NEQ STRING
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AtomicConstraints.NotEquals(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= formula EOF
        {
            Object RESULT = null;
            int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).left;
            int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).right;
            Constraint start_val = (Constraint) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = start_val;
            CUP$Parser$result = new java_cup.runtime.Symbol(0/* $START */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // formula ::= STRING EQ STRING
        {
            Constraint RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).left;
            int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).right;
            String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AtomicConstraints.Equals(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* formula */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
