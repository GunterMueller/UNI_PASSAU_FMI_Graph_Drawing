//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri May 07 19:01:27 CEST 2010
//----------------------------------------------------

package org.graffiti.plugins.ios.gml.gmlReader.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.graffiti.plugins.ios.gml.gmlReader.gml.Gml;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlEdge;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlEdgeStyle;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlGraph;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlInt;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlKey;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlList;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlNode;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlNodeStyle;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlParseError;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlReal;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlString;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlSyntaxError;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlValue;
import org.graffiti.util.logging.GlobalLoggerSetting;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Fri May 07 19:01:27 CEST 2010
 */
@SuppressWarnings("unchecked")
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\016\000\002\003\003\000\002\002\004\000\002\004"
            + "\005\000\002\004\005\000\002\004\005\000\002\004\005"
            + "\000\002\004\005\000\002\004\005\000\002\004\002\000"
            + "\002\005\003\000\002\005\003\000\002\005\003\000\002"
            + "\005\005\000\002\005\005" });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\035\000\020\002\ufff9\004\006\005\012\006\005\007"
            + "\004\010\007\011\013\001\002\000\012\012\016\013\014"
            + "\014\017\015\015\001\002\000\012\012\016\013\014\014"
            + "\017\015\015\001\002\000\012\012\016\013\014\014\017"
            + "\015\015\001\002\000\012\012\016\013\014\014\017\015"
            + "\015\001\002\000\004\002\027\001\002\000\004\002\001"
            + "\001\002\000\012\012\016\013\014\014\017\015\015\001"
            + "\002\000\012\012\016\013\014\014\017\015\015\001\002"
            + "\000\024\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007"
            + "\ufff8\010\ufff8\011\ufff8\016\ufff8\001\002\000\022\003\ufff9"
            + "\004\006\005\012\006\005\007\004\010\007\011\013\016"
            + "\ufff9\001\002\000\024\002\ufff6\003\ufff6\004\ufff6\005\ufff6"
            + "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\016\ufff6\001\002\000"
            + "\024\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7"
            + "\010\ufff7\011\ufff7\016\ufff7\001\002\000\024\002\ufff9\003"
            + "\ufff9\004\006\005\012\006\005\007\004\010\007\011\013"
            + "\016\ufff9\001\002\000\010\002\ufffd\003\ufffd\016\ufffd\001"
            + "\002\000\006\003\023\016\024\001\002\000\024\002\ufff4"
            + "\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011"
            + "\ufff4\016\ufff4\001\002\000\024\002\ufff5\003\ufff5\004\ufff5"
            + "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\016\ufff5\001"
            + "\002\000\024\002\ufff9\003\ufff9\004\006\005\012\006\005"
            + "\007\004\010\007\011\013\016\ufff9\001\002\000\010\002"
            + "\uffff\003\uffff\016\uffff\001\002\000\004\002\000\001\002"
            + "\000\024\002\ufff9\003\ufff9\004\006\005\012\006\005\007"
            + "\004\010\007\011\013\016\ufff9\001\002\000\010\002\ufffe"
            + "\003\ufffe\016\ufffe\001\002\000\024\002\ufff9\003\ufff9\004"
            + "\006\005\012\006\005\007\004\010\007\011\013\016\ufff9"
            + "\001\002\000\010\002\ufffa\003\ufffa\016\ufffa\001\002\000"
            + "\024\002\ufff9\003\ufff9\004\006\005\012\006\005\007\004"
            + "\010\007\011\013\016\ufff9\001\002\000\010\002\ufffc\003"
            + "\ufffc\016\ufffc\001\002\000\024\002\ufff9\003\ufff9\004\006"
            + "\005\012\006\005\007\004\010\007\011\013\016\ufff9\001"
            + "\002\000\010\002\ufffb\003\ufffb\016\ufffb\001\002" });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\035\000\006\003\007\004\010\001\001\000\004\005"
            + "\035\001\001\000\004\005\033\001\001\000\004\005\031"
            + "\001\001\000\004\005\027\001\001\000\002\001\001\000"
            + "\002\001\001\000\004\005\024\001\001\000\004\005\017"
            + "\001\001\000\002\001\001\000\004\004\021\001\001\000"
            + "\002\001\001\000\002\001\001\000\004\004\020\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\004\004\025\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\004\030\001\001\000\002\001"
            + "\001\000\004\004\032\001\001\000\002\001\001\000\004"
            + "\004\034\001\001\000\002\001\001\000\004\004\036\001"
            + "\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }

    /**
     * The logger of the parser.
     */
    private static final Logger logger = Logger.getLogger(parser.class
            .getName());

    static {
        logger.setLevel(GlobalLoggerSetting.LOGGER_LEVEL);
    }

    @Override
    public void syntax_error(java_cup.runtime.Symbol current) {
        // System.err.print("parse error near " + current.value + ". ");
        logger.severe("parser error near " + current.value + "(line "
                + current.left + ").");
        GmlSyntaxError se = new GmlSyntaxError(current.left, current);
        addError(se);
    }

    public void report_error(String message, java_cup.runtime.Symbol info) {
        logger.severe("parse error between character " + info.left + " and "
                + info.right + ": " + info.value + " (" + message + ").");
    }

    /**
     * Returns the read in graph.
     * 
     * @return the read in graph.
     */
    public Gml getGraph() {
        return action_obj.gml;
    }

    /**
     * Returns the read in node style.
     * 
     * @return the read in node style.
     */
    public GmlNodeStyle getNodeStyle() {
        return action_obj.nodeStyle;
    }

    /**
     * Returns the read in edge style.
     * 
     * @return the read in edge style.
     */
    public GmlEdgeStyle getEdgeStyle() {
        return action_obj.edgeStyle;
    }

    void addError(GmlParseError pe) {
        assert pe != null;
        action_obj.errors.add(pe);
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {

    /**
     * The representation of the GML file the parser has read in.
     */
    Gml gml = null;

    /**
     * The node style declared in the GML file.
     */
    GmlNodeStyle nodeStyle = null;

    /**
     * The edge style declared in the GML.
     */
    GmlEdgeStyle edgeStyle = null;

    /**
     * The list of errors the parser detects.
     */
    @SuppressWarnings("unchecked")
    List errors = new ArrayList();

    /**
     * The logger of the parser.
     */
    private static final Logger logger = Logger.getLogger(parser.class
            .getName());

    static {
        logger.setLevel(Level.OFF);
    }

    @SuppressWarnings("unused")
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    @SuppressWarnings( { "unchecked", "cast" })
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack, int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // value ::= LBRACE list error
        {
            GmlValue RESULT = null;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            @SuppressWarnings("unused")
            Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.severe("matching \"]\" " + "missing (line " + eleft + ").");
            GmlParseError pe = new GmlParseError(eleft,
                    "Matching \"]\" missing.");
            errors.add(pe);
            RESULT = l;
            CUP$parser$result = new java_cup.runtime.Symbol(3/* value */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // value ::= LBRACE list RBRACE
        {
            GmlValue RESULT = null;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            logger.info("reading list.");
            RESULT = l;
            CUP$parser$result = new java_cup.runtime.Symbol(3/* value */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // value ::= STRING
        {
            GmlValue RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("reading string: \"" + s + "\" at line " + sleft + ".");
            RESULT = new GmlString(sleft, s);
            CUP$parser$result = new java_cup.runtime.Symbol(3/* value */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // value ::= REAL
        {
            GmlValue RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger
                    .info("reading real number: " + r + " at line " + rleft
                            + ".");
            RESULT = new GmlReal(rleft, r);
            CUP$parser$result = new java_cup.runtime.Symbol(3/* value */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // value ::= INTEGER
        {
            GmlValue RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("reading integer: " + i + " at line " + ileft + ".");
            RESULT = new GmlInt(ileft, i);
            CUP$parser$result = new java_cup.runtime.Symbol(3/* value */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // list ::=
        {
            GmlList RESULT = null;
            logger.info("end of list.");
            RESULT = null;
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // list ::= KEY value list
        {
            GmlList RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            @SuppressWarnings("unused")
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            @SuppressWarnings("unused")
            int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlValue v = (GmlValue) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("key " + k + " detected at line " + kleft + ".");
            GmlKey gk = new GmlKey(kleft, k, v);
            RESULT = new GmlList(kleft, gk, l);
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // list ::= EDGE value list
        {
            GmlList RESULT = null;
            int edleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            @SuppressWarnings("unused")
            int edright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            @SuppressWarnings("unused")
            GmlEdge ed = (GmlEdge) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            @SuppressWarnings("unused")
            int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlValue v = (GmlValue) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("edge detected at line " + edleft + ".");
            GmlEdge e = new GmlEdge(edleft, v);
            RESULT = new GmlList(edleft, e, l);
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // list ::= NODE value list
        {
            GmlList RESULT = null;
            int noleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            @SuppressWarnings("unused")
            int noright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            @SuppressWarnings("unused")
            GmlNode no = (GmlNode) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            @SuppressWarnings("unused")
            int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlValue v = (GmlValue) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("node detected at line " + noleft + ".");
            GmlNode n = new GmlNode(noleft, v);
            RESULT = new GmlList(noleft, n, l);
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // list ::= EDGESTYLE value list
        {
            GmlList RESULT = null;
            int esleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            @SuppressWarnings("unused")
            int esright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            @SuppressWarnings("unused")
            GmlEdgeStyle es = (GmlEdgeStyle) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            @SuppressWarnings("unused")
            int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlValue v = (GmlValue) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("edge style detected at line " + esleft + ".");
            edgeStyle = new GmlEdgeStyle(esleft, v);
            RESULT = l;
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // list ::= NODESTYLE value list
        {
            GmlList RESULT = null;
            int nsleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            @SuppressWarnings("unused")
            int nsright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            @SuppressWarnings("unused")
            GmlNodeStyle ns = (GmlNodeStyle) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            @SuppressWarnings("unused")
            int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlValue v = (GmlValue) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("node style detected at line " + nsleft + ".");
            nodeStyle = new GmlNodeStyle(nsleft, v);
            RESULT = l;
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // list ::= GRAPH value list
        {
            GmlList RESULT = null;
            int grleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            @SuppressWarnings("unused")
            int grright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            @SuppressWarnings("unused")
            GmlGraph gr = (GmlGraph) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            @SuppressWarnings("unused")
            int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            GmlValue v = (GmlValue) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            @SuppressWarnings("unused")
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("graph detected at line " + grleft + ".");
            GmlGraph g = new GmlGraph(grleft, v);
            RESULT = new GmlList(grleft, g, l);
            CUP$parser$result = new java_cup.runtime.Symbol(2/* list */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= gml EOF
        {
            Object RESULT = null;
            @SuppressWarnings("unused")
            int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Gml start_val = (Gml) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            RESULT = start_val;
            CUP$parser$result = new java_cup.runtime.Symbol(0/* $START */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // gml ::= list
        {
            Gml RESULT = null;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            GmlList l = (GmlList) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            logger.info("gml detected.");
            if (l == null) {
                logger.warning("empty list");
            }
            gml = new Gml(lleft, nodeStyle, edgeStyle, l, errors);
            CUP$parser$result = new java_cup.runtime.Symbol(1/* gml */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
