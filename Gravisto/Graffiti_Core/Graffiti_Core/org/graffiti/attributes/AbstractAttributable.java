// =============================================================================
//
//   AbstractAttributable.java
//
//   Copyright (c) 2001-2006 Gravisto Team, University of Passau
//
// =============================================================================
// $Id: AbstractAttributable.java 5767 2010-05-07 18:42:02Z gleissner $

package org.graffiti.attributes;

import org.graffiti.event.AttributeEvent;

/**
 * Provides common functionality for <code>Attributable</code> classes. This
 * class also contains additional functionality for dealing with attributes.
 * 
 * @version $Revision: 5767 $
 * 
 * @see Attributable
 */
public abstract class AbstractAttributable implements Attributable {
    /** Constant indicating a <code>BooleanAttribute</code>. */
    private static final int BOOLEAN_ATTRIBUTE = 0;

    /** Constant indicating a <code>DoubleAttribute</code>. */
    private static final int DOUBLE_ATTRIBUTE = 1;

    /** Constant indicating a <code>FloatAttribute</code>. */
    private static final int FLOAT_ATTRIBUTE = 2;

    /** Constant indicating a <code>IntegerAttribute</code>. */
    private static final int INTEGER_ATTRIBUTE = 3;

    /** Constant indicating a <code>StringAttribute</code>. */
    private static final int STRING_ATTRIBUTE = 4;

    /** Constant indicating a <code>ByteAttribute</code>. */
    private static final int BYTE_ATTRIBUTE = 5;

    /** Constant indicating a <code>ShortAttribute</code>. */
    private static final int SHORT_ATTRIBUTE = 6;

    /** Constant indicating a <code>LongAttribute</code>. */
    private static final int LONG_ATTRIBUTE = 7;

    /** Contains the hierarchy of attributes the GraphElement contains. */
    protected CollectionAttribute attributes;

    /**
     * Constructs a new <code>AbstractAttribute</code> instance. Instantiates
     * its <code>CollectionAttribute</code>.
     */
    public AbstractAttributable() {
        attributes = new HashMapAttribute("");
        attributes.setAttributable(this);
    }

    /**
     * Constructs a new <code>AbstractAttribute</code> instance.
     * 
     * @param coll
     *            the <code>CollectionAttribute</code> of the new
     *            <code>AbstractAttributable</code> instance.
     */
    public AbstractAttributable(CollectionAttribute coll) {
        if (coll == null) {
            attributes = new HashMapAttribute("");
        } else {
            attributes = coll;
        }

        attributes.setAttributable(this);
    }

    /**
     * Returns the <code>Attribute</code> of the given path.
     * 
     * @param path
     *            the path to the<code>Attribute</code>.
     * 
     * @return the <code>Attribute</code> at the specified location.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the location
     *                specified by <code>path</code>.
     */
    public Attribute getAttribute(String path)
            throws AttributeNotFoundException {
        assert path != null;

        /* if the path contains "." as first character then remove it. */
        if (!path.equals("")
                && path.substring(0, 1).equals(Attribute.SEPARATOR))
            return attributes.getAttribute(path.substring(1));

        return attributes.getAttribute(path);
    }

    /**
     * Returns the root CollectionAttribute which contains the attributes of the
     * current object.
     * 
     * @return the attributes of the current object.
     */
    public CollectionAttribute getAttributes() {
        return attributes;
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     */
    public void setBoolean(String path, boolean value) {
        assert path != null;
        doSet(path, new Boolean(value), BOOLEAN_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return The value of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public boolean getBoolean(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            BooleanAttribute attr = (BooleanAttribute) attributes
                    .getAttribute(path);

            return attr.getBoolean();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No BooleanAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     */
    public void setByte(String path, byte value) {
        assert path != null;
        doSet(path, new Byte(value), BYTE_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return The value of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public byte getByte(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            ByteAttribute attr = (ByteAttribute) attributes.getAttribute(path);

            return attr.getByte();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No ByteAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in CollectionAttribute and method
     * <code>setValue(Object o)</code> in <code>Attribute</code>. If more than
     * one attributes have to be created while stepping down the path, only one
     * event is generated, containing the attribute that has been created first
     * (i.e. the root attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set to the <code>Attribute</code> to.
     */
    public void setDouble(String path, double value) {
        assert path != null;
        doSet(path, new Double(value), DOUBLE_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return the value of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public double getDouble(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            DoubleAttribute attr = (DoubleAttribute) attributes
                    .getAttribute(path);

            return attr.getDouble();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No DoubleAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set to the <code>Attribute</code> to.
     */
    public void setFloat(String path, float value) {
        assert path != null;
        doSet(path, new Float(value), FLOAT_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return the vlaue of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public float getFloat(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            FloatAttribute attr = (FloatAttribute) attributes
                    .getAttribute(path);

            return attr.getFloat();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No FloatAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     */
    public void setInteger(String path, int value) {
        assert path != null;
        doSet(path, new Integer(value), INTEGER_ATTRIBUTE);
    }

    /**
     * Returns the value of the<code>Attribute</code>at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return the vlaue of the<code>Attribute</code>at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public int getInteger(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            IntegerAttribute attr = (IntegerAttribute) attributes
                    .getAttribute(path);

            return attr.getInteger();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No IntegerAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     */
    public void setLong(String path, long value) {
        assert path != null;
        doSet(path, new Long(value), LONG_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return The value of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public long getLong(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            LongAttribute attr = (LongAttribute) attributes.getAttribute(path);

            return attr.getLong();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No LongAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code> is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls to
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     */
    public void setShort(String path, short value) {
        assert path != null;
        doSet(path, new Short(value), SHORT_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return The value of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public short getShort(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            ShortAttribute attr = (ShortAttribute) attributes
                    .getAttribute(path);

            return attr.getShort();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No ShortAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value. The
     * <code>Attribute</code>is created at the given location, if it does not
     * yet exist. Appropriate (add and change) events are generated by calls of
     * method <code>add(Attribute a)</code> in <code>CollectionAttribute</code>
     * and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set to the<code>Attribute</code>to.
     */
    public void setString(String path, String value) {
        assert (path != null) && (value != null);
        doSet(path, value, STRING_ATTRIBUTE);
    }

    /**
     * Returns the value of the <code>Attribute</code> at the given path.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * 
     * @return the value of the <code>Attribute</code> at the given path.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public String getString(String path) throws AttributeNotFoundException {
        assert path != null;

        try {
            StringAttribute attr = (StringAttribute) attributes
                    .getAttribute(path);

            return attr.getString();
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No StringAttribute found at path " + path + ".");
        }
    }

    /**
     * Adds <code>attr</code> to the attributes at position indicated by path.
     * Informs the <code>ListenerManager</code> about the change by using the
     * <code>add(Attribute a)</code> method from
     * <code>CollectionAttribute</code>.
     * 
     * <p>
     * <b>Implementation Notes:</b><code>path</code> specifies the location of
     * the <code>CollectionAttribute</code> or (in case <code>path</code> is the
     * empty string) the Attributable <code>attr</code> should be added to.
     * Usage should look as follows: <blockquote>
     * 
     * <pre>
     *         Graph g = new Graph(..);
     *         CollectionAttribute ca = new CollectionAttribute(&quot;root&quot;);
     *         //add ca to the attributable g as root attribute
     *         g.addAttribute(ca, &quot;&quot;);
     *         IntegerAttribute ia = new IntegerAttribute(&quot;int&quot;, 10);
     *         //add ia as child of root
     *         g.addAttribute(ia, &quot;root&quot;);
     * </pre>
     * 
     * </blockquote>
     * </p>
     * 
     * @param attr
     *            the <code>Attribute</code> to be added.
     * @param path
     *            DOCUMENT ME!
     * 
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                same <code>id</code> as <code>attr</code> at location
     *                <code>path</code>.
     * @exception NoCollectionAttributeException
     *                if the<code>Attribute</code> at location <code>path</code>
     *                is not a CollectionAttribute.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addAttribute(Attribute attr, String path)
            throws AttributeExistsException, NoCollectionAttributeException,
            FieldAlreadySetException {
        assert attr != null : "must not try to add a null attribute";
        assert path != null;

        // if path points to a CollectionAttribute, add attr
        Attribute maybeCollAttr = getAttribute(path);
        CollectionAttribute collAttr = null;

        try {
            collAttr = (CollectionAttribute) maybeCollAttr;
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "The Attribute where you wanted to add another Attribute "
                            + "is not a CollectionAttribute");
        }

        collAttr.add(attr);
    }

    /**
     * Adds an <code>BooleanAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>BooleanAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addBoolean(String path, String id, boolean value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        BooleanAttribute ia = new BooleanAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds an <code>ByteAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>ByteAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addByte(String path, String id, byte value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        ByteAttribute ia = new ByteAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds a <code>DoubleAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>DoubleAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addDouble(String path, String id, double value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        DoubleAttribute ia = new DoubleAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds a <code>FloatAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>FloatAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the<code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addFloat(String path, String id, float value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        FloatAttribute ia = new FloatAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds an <code>IntegerAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>IntegerAttribute</code> should be added to.
     * @param id
     *            the id of the new <code>IntegerAttribute</code>.
     * @param value
     *            the value of the new <code>IntegerAttribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an attribute with the given
     *                <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addInteger(String path, String id, int value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        IntegerAttribute ia = new IntegerAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds an <code>LongAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>LongAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addLong(String path, String id, long value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        LongAttribute ia = new LongAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds an <code>ShortAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>ShortAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addShort(String path, String id, short value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert (path != null) && (id != null);

        ShortAttribute ia = new ShortAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Adds a <code>StringAttribute</code> with the given value and id to a
     * <code>CollectionAttribute</code> at <code>path</code>. Events are
     * generated by using the <code>add(Attribute a) </code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the path to the <code>CollectionAttribute</code> the new
     *            <code>StringAttribute</code> should be added to.
     * @param id
     *            the id of the newly created <code>Attribute</code>.
     * @param value
     *            the value of the newly created <code>Attribute</code>.
     * 
     * @exception NoCollectionAttributeException
     *                if the <code>Attribute</code> at the location specified by
     *                <code>path</code> is no <code>CollectionAttribute</code>.
     * @exception AttributeExistsException
     *                if there is already an <code>Attribute</code> with the
     *                given <code>id</code> at the given <code>path</code>.
     * @throws FieldAlreadySetException
     *             DOCUMENT ME!
     */
    public void addString(String path, String id, String value)
            throws NoCollectionAttributeException, AttributeExistsException,
            FieldAlreadySetException {
        assert ((path != null) & (id != null)) && (value != null);

        StringAttribute ia = new StringAttribute(id, value);
        Attribute attr = attributes.getAttribute(path);

        try {
            ((CollectionAttribute) attr).add(ia);
        } catch (ClassCastException cce) {
            throw new NoCollectionAttributeException(
                    "No CollectionAttribute at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>BooleanAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeBoolean(String path, boolean value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);

        try {
            ((BooleanAttribute) attr).setBoolean(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No BooleanAttribute found at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>ByteAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeByte(String path, byte value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);

        try {
            ((ByteAttribute) attr).setByte(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No ByteAttribute found at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setDouble(double value) </code>
     * method from <code>DoubleAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set to the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeDouble(String path, double value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);

        try {
            ((DoubleAttribute) attr).setDouble(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No DoubleAttribute found at path " + path + ".");
        }
    }

    /**
     * Sets the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>FloatAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set to the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeFloat(String path, float value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);

        try {
            ((FloatAttribute) attr).setFloat(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No FloatAttribute found at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>IntegerAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeInteger(String path, int value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);
        AttributeEvent attrEvent = new AttributeEvent(attr);
        getListenerManager().preAttributeChanged(attrEvent);

        try {
            ((IntegerAttribute) attr).setInteger(value);
            getListenerManager().postAttributeChanged(attrEvent);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No IntegerAttribute found at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>LongAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeLong(String path, long value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);

        try {
            ((LongAttribute) attr).setLong(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No LongAttribute found at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>ShortAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeShort(String path, short value)
            throws AttributeNotFoundException {
        assert path != null;

        Attribute attr = attributes.getAttribute(path);

        try {
            ((ShortAttribute) attr).setShort(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No ShortAttribute found at path " + path + ".");
        }
    }

    /**
     * Changes the <code>Attribute</code> at the given path to the given value.
     * Events are generated by using the <code>setInteger(int value) </code>
     * method from <code>StringAttribute</code>.
     * 
     * @param path
     *            the path to search for the <code>Attribute</code>.
     * @param value
     *            the value to set to the <code>Attribute</code> to.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the specified
     *                location.
     */
    public void changeString(String path, String value)
            throws AttributeNotFoundException {
        assert (path != null) && (value != null);

        Attribute attr = attributes.getAttribute(path);

        try {
            ((StringAttribute) attr).setString(value);
        } catch (ClassCastException cce) {
            throw new AttributeNotFoundException(
                    "No StringAttribute found at path " + path + ".");
        }
    }

    /**
     * Deletes the <code>Attribute</code> attr from the attributes. Informs the
     * <code>ListenerManager</code> about the change by using the
     * <code>remove(Attribute a)</code> method from
     * <code>CollectionAttribute</code>.
     * 
     * @param path
     *            the relative path of the<code>Attribute</code>to be removed.
     * 
     * @exception AttributeNotFoundException
     *                if there is no <code>Attribute</code> at the location
     *                specified by <code>path</code>.
     */
    public void removeAttribute(String path) throws AttributeNotFoundException {
        assert path != null;

        CollectionAttribute parentAttr = null;

        if (path.indexOf(Attribute.SEPARATOR) == -1) {
            parentAttr = attributes;
        } else {
            String parentPath = path.substring(0, path
                    .lastIndexOf(Attribute.SEPARATOR));
            // had a "-1" here, did nobody test that?

            try {
                parentAttr = (CollectionAttribute) (attributes
                        .getAttribute(parentPath));
            } catch (ClassCastException cce) {
                throw new AttributeNotFoundException(
                        "Parent of attribute is not a CollectionAttribute");
            }
        }

        Attribute attr = parentAttr.getAttribute(path.substring(path
                .lastIndexOf(Attribute.SEPARATOR) + 1));

        parentAttr.remove(attr);
    }

    /**
     * Sets the<code>Attribute</code>depending on its type. Generates (add and
     * change) events by calling method <code>add(Attribute a)</code> in
     * <code>CollectionAttribute</code> and method <code>setValue(Object
     * o)</code> in <code>Attribute</code>. If more than one attributes have to
     * be created while stepping down the path, only one event is generated,
     * containing the attribute that has been created first (i.e. the root
     * attribute of the newly appended hierarchy).
     * 
     * @param path
     *            the path where the <code>Attribute</code> shall be set.
     * @param o
     *            the <code>Object</code> which shall be set.
     * @param flag
     *            indicates the type of<code>Attribute</code> to set.
     * 
     * @throws NoCollectionAttributeException
     *             DOCUMENT ME!
     * @throws AttributeExistsException
     *             DOCUMENT ME!
     */
    private void doSet(String path, Object o, int flag) {
        assert !path.equals("") : "illegal path (empty path)";

        boolean furtherInformLM = true;
        String[] subPaths = path.split("\\"
                + String.valueOf(Attribute.SEPARATOR));
        CollectionAttribute parent = attributes;

        for (int i = 0; i < (subPaths.length - 1); i++) {
            try {
                Attribute attr = parent.getAttribute(subPaths[i]);
                parent = (CollectionAttribute) attr;
            } catch (AttributeNotFoundException anfe) {
                // pph: might look a bit ... ah ... complicated?
                CollectionAttribute ca = new HashMapAttribute(subPaths[i]);
                parent.add(ca);
                parent = ca;
                i++;
                furtherInformLM = false;

                while (i < (subPaths.length - 1)) {
                    ca = new HashMapAttribute(subPaths[i]);
                    parent.add(ca, furtherInformLM);
                    parent = ca;
                    i++;
                }
            } catch (ClassCastException cce) {
                throw new NoCollectionAttributeException("Attribute with id "
                        + subPaths[i] + " is not a " + " CollectionAttribute.");
            }
        }

        Attribute toSet = null;

        try {
            toSet = parent.getAttribute(subPaths[subPaths.length - 1]);
            toSet.setValue(o);
        } catch (AttributeNotFoundException anfe) {
            Attribute a = null;

            switch (flag) {
            case BOOLEAN_ATTRIBUTE:
                a = new BooleanAttribute(subPaths[subPaths.length - 1],
                        ((Boolean) o).booleanValue());

                break;

            case DOUBLE_ATTRIBUTE:
                a = new DoubleAttribute(subPaths[subPaths.length - 1],
                        ((Double) o).doubleValue());

                break;

            case FLOAT_ATTRIBUTE:
                a = new FloatAttribute(subPaths[subPaths.length - 1],
                        ((Float) o).floatValue());

                break;

            case INTEGER_ATTRIBUTE:
                a = new IntegerAttribute(subPaths[subPaths.length - 1],
                        ((Integer) o).intValue());

                break;

            case STRING_ATTRIBUTE:
                a = new StringAttribute(subPaths[subPaths.length - 1],
                        (String) o);

                break;

            case LONG_ATTRIBUTE:
                a = new LongAttribute(subPaths[subPaths.length - 1], (Long) o);

                break;

            case BYTE_ATTRIBUTE:
                a = new ByteAttribute(subPaths[subPaths.length - 1], (Byte) o);

                break;

            case SHORT_ATTRIBUTE:
                a = new ShortAttribute(subPaths[subPaths.length - 1], (Short) o);

                break;

            default:
                assert false : "Encountered an unknown attribute type ...";
            }

            assert a != null : "Could not create a basic attribute ...";
            parent.add(a, furtherInformLM);
        } catch (IllegalArgumentException iae) {
            throw iae;
            // changed by C. Klukas, IPK. It is not clear why
            // a new exception should be thrown, that is different
            // to the real cause of the problem (at least in my test)
            // A new and missleading error message appears if a new
            // exception is thrown here.
            /*
             * throw new AttributeExistsException( "Attribute with path " + path
             * + " already exists but not an " + o.getClass().getName() +
             * "Attribute.");
             */
        }
    }

    /**
     * Returns if the given path contains an <code>Attribute</code> of any kind.
     * 
     * @param path
     *            The path of the <code>Attribute</code> to be tested.
     * 
     * @return <code>true</code>, if an <code>Attribute</code> is saved in the
     *         given path, <code>false</code> otherwise.
     */
    public boolean containsAttribute(String path) {
        return attributes.containsAttribute(path);
    }
}

// -----------------------------------------------------------------------------
// end of file
// -----------------------------------------------------------------------------
