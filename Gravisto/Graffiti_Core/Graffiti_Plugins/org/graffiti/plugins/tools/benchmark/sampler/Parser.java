//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jul 19 16:58:18 CEST 2009
//----------------------------------------------------

package org.graffiti.plugins.tools.benchmark.sampler;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Sun Jul 19 16:58:18 CEST 2009
 */
public class Parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\021\000\002\006\003\000\002\002\004\000\002\006"
            + "\005\000\002\005\005\000\002\005\007\000\002\003\003"
            + "\000\002\003\003\000\002\003\006\000\002\003\004\000"
            + "\002\003\005\000\002\003\005\000\002\003\005\000\002"
            + "\003\005\000\002\003\005\000\002\003\005\000\002\004"
            + "\003\000\002\004\005" });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\043\000\004\020\004\001\002\000\004\007\012\001"
            + "\002\000\010\002\001\006\001\011\001\001\002\000\006"
            + "\002\010\006\007\001\002\000\004\020\004\001\002\000"
            + "\004\002\000\001\002\000\010\002\uffff\006\uffff\011\uffff"
            + "\001\002\000\014\004\020\010\016\013\017\020\013\021"
            + "\015\001\002\000\026\002\ufffc\004\040\005\ufffc\006\ufffc"
            + "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\001"
            + "\002\000\022\002\ufffe\006\ufffe\011\ufffe\012\023\013\024"
            + "\014\027\015\026\016\025\001\002\000\024\002\ufffb\005"
            + "\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb"
            + "\016\ufffb\001\002\000\004\020\004\001\002\000\012\004"
            + "\020\013\017\020\013\021\015\001\002\000\012\004\020"
            + "\013\017\020\013\021\015\001\002\000\016\005\022\012"
            + "\023\013\024\014\027\015\026\016\025\001\002\000\024"
            + "\002\ufff3\005\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\014"
            + "\ufff3\015\ufff3\016\ufff3\001\002\000\012\004\020\013\017"
            + "\020\013\021\015\001\002\000\012\004\020\013\017\020"
            + "\013\021\015\001\002\000\012\004\020\013\017\020\013"
            + "\021\015\001\002\000\012\004\020\013\017\020\013\021"
            + "\015\001\002\000\012\004\020\013\017\020\013\021\015"
            + "\001\002\000\024\002\ufff5\005\ufff5\006\ufff5\011\ufff5\012"
            + "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\025\001\002\000\024"
            + "\002\ufff4\005\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4\014"
            + "\ufff4\015\ufff4\016\025\001\002\000\024\002\ufff8\005\ufff8"
            + "\006\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016"
            + "\025\001\002\000\024\002\ufff6\005\ufff6\006\ufff6\011\ufff6"
            + "\012\ufff6\013\ufff6\014\027\015\026\016\025\001\002\000"
            + "\024\002\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7"
            + "\014\027\015\026\016\025\001\002\000\024\002\ufff9\005"
            + "\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9"
            + "\016\ufff9\001\002\000\006\006\007\011\037\001\002\000"
            + "\010\002\ufffd\006\ufffd\011\ufffd\001\002\000\012\004\020"
            + "\013\017\020\013\021\015\001\002\000\020\005\ufff2\006"
            + "\ufff2\012\023\013\024\014\027\015\026\016\025\001\002"
            + "\000\006\005\043\006\044\001\002\000\024\002\ufffa\005"
            + "\ufffa\006\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa"
            + "\016\ufffa\001\002\000\012\004\020\013\017\020\013\021"
            + "\015\001\002\000\020\005\ufff1\006\ufff1\012\023\013\024"
            + "\014\027\015\026\016\025\001\002" });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\043\000\006\005\004\006\005\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\004\005\010"
            + "\001\001\000\002\001\001\000\002\001\001\000\004\003"
            + "\013\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\006\005\004\006\035\001\001\000\004\003"
            + "\034\001\001\000\004\003\020\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\003\033\001\001\000\004\003"
            + "\032\001\001\000\004\003\031\001\001\000\004\003\030"
            + "\001\001\000\004\003\027\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\006\003\040\004\041\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\004\003\044\001"
            + "\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    @SuppressWarnings("unchecked")
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Parser$actions {

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
    }

    /** Method with the actual generated action code. */
    @SuppressWarnings("cast")
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int CUP$Parser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 16: // samplerList ::= samplerList KOMMA sampler
        {
            SamplerList RESULT = null;
            SamplerList a = (SamplerList) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            a.add(b);
            RESULT = a;
            CUP$Parser$result = new java_cup.runtime.Symbol(2/* samplerList */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 15: // samplerList ::= sampler
        {
            SamplerList RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new SamplerList(a);
            CUP$Parser$result = new java_cup.runtime.Symbol(2/* samplerList */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 14: // sampler ::= LPAREN sampler RPAREN
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = a;
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // sampler ::= sampler DIV sampler
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new FunctionSampler("#/", a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // sampler ::= sampler TIMES sampler
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new FunctionSampler("#*", a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // sampler ::= sampler MINUS sampler
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new FunctionSampler("#-", a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // sampler ::= sampler PLUS sampler
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new FunctionSampler("#+", a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // sampler ::= sampler EXP sampler
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new FunctionSampler("#^", a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // sampler ::= MINUS sampler
        {
            Sampler RESULT = null;
            Sampler a = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new FunctionSampler("#u-", a);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // sampler ::= ID LPAREN samplerList RPAREN
        {
            Sampler RESULT = null;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 3)).value;
            SamplerList b = (SamplerList) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = new FunctionSampler(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // sampler ::= NUMBER
        {
            Sampler RESULT = null;
            Double a = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new ConstantSampler(a);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // sampler ::= ID
        {
            Sampler RESULT = null;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new VariableSampler(a);
            CUP$Parser$result = new java_cup.runtime.Symbol(1/* sampler */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // assignment ::= ID ASSIGN LQUOTE assignmentList RQUOTE
        {
            RandomAssignment RESULT = null;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 4)).value;
            AssignmentList b = (AssignmentList) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = new RandomAssignment(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(3/* assignment */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 4)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // assignment ::= ID ASSIGN sampler
        {
            RandomAssignment RESULT = null;
            String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            Sampler b = (Sampler) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new RandomAssignment(a, b);
            CUP$Parser$result = new java_cup.runtime.Symbol(3/* assignment */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // assignmentList ::= assignmentList KOMMA assignment
        {
            AssignmentList RESULT = null;
            AssignmentList a = (AssignmentList) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            RandomAssignment b = (RandomAssignment) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            a.add(b);
            RESULT = a;
            CUP$Parser$result = new java_cup.runtime.Symbol(
                    4/* assignmentList */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= assignmentList EOF
        {
            Object RESULT = null;
            AssignmentList start_val = (AssignmentList) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = start_val;
            CUP$Parser$result = new java_cup.runtime.Symbol(0/* $START */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // assignmentList ::= assignment
        {
            AssignmentList RESULT = null;
            RandomAssignment a = (RandomAssignment) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 0)).value;
            RESULT = new AssignmentList(a);
            CUP$Parser$result = new java_cup.runtime.Symbol(
                    4/* assignmentList */,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$Parser$stack
                            .elementAt(CUP$Parser$top - 0)).right, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
