/**
 * 
 */
package org.graffiti.plugins.algorithms.graviso.junit;

import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;

import org.graffiti.attributes.Attribute;
import org.graffiti.attributes.HashMapAttribute;
import org.graffiti.graph.Edge;
import org.graffiti.graph.FastGraph;
import org.graffiti.graph.Graph;
import org.graffiti.graph.Node;
import org.graffiti.graphics.ColorAttribute;
import org.graffiti.graphics.GraphicAttributeConstants;
import org.graffiti.plugins.ios.exporters.graphml.GraphMLWriter;

/**
 * @author lenhardt
 * 
 */
public class GraphGenerator {

    private static java.util.Random rnd = new java.util.Random((long) 1.0);

    // private static final String PATH =
    // "/Users/lenhardt/Documents/workspace/GravISO/graphs/iso/bvg/mcs90/rand/r001/";

    private static int convertLEShort(int c1, int c2) {
        return (c1 | (c2 << 8));
    }

    public static Graph swap2edges(Graph g1) throws Exception {
        Graph g2 = (Graph) g1.copy();
        int numEdges = g2.getNumberOfEdges();
        int e1num = rnd.nextInt(numEdges);
        int e2num = rnd.nextInt(numEdges);
        int i = 0;
        Edge e1 = null;
        Edge e2 = null;

        for (Edge e : g2.getEdges()) {
            if (e1num == i) {
                e1 = e;
            }
            if (e2num == i) {
                e2 = e;
            }
            i++;
        }
        if (e1 == null || e2 == null)
            throw new Exception("could not retrieve edges to swap");

        g2.addEdge(e1.getSource(), e2.getTarget(), e1.isDirected());
        g2.addEdge(e2.getSource(), e1.getTarget(), e2.isDirected());

        g2.deleteEdge(e1);
        g2.deleteEdge(e2);

        return g2;
    }

    public static List<File> getGraphFiles(String path) {
        File baseDir = new File(path);
        List<File> l = new LinkedList<File>();

        for (File dir : baseDir.listFiles()) {
            if (dir.getName().charAt(0) != '.') {
                String fileName = dir.getAbsolutePath();
                if (dir.isFile()) {
                    if (fileName.charAt(fileName.length() - 3) == 'A'
                            || fileName.charAt(fileName.length() - 3) == 'a') {
                        l.add(dir);
                    }
                } else {
                    l.addAll(getGraphFiles(fileName));
                }
            }
        }
        return l;
    }

    private static int[][] readGraph(String f) {
        FileInputStream fis;
        DataInputStream dis;
        int[][] g = new int[1][1];
        int totEdges = 0;

        try {
            fis = new FileInputStream(f);
            // Wrap with a DataInputStream so that we can
            // use its readInt() method.
            dis = new DataInputStream(fis);

            int nodes = convertLEShort(dis.readUnsignedByte(), dis
                    .readUnsignedByte());
            g = new int[nodes][nodes];

            for (int i = 0; i < nodes; i++) {
                int edges = convertLEShort(dis.readUnsignedByte(), dis
                        .readUnsignedByte());
                totEdges += edges;
                for (int j = 0; j < edges; j++) {
                    int target = convertLEShort(dis.readUnsignedByte(), dis
                            .readUnsignedByte());
                    g[i][target] = 1;
                }
            }
        } catch (EOFException eof) {
            System.out.println("EOF reached ");
        } catch (IOException ioe) {
            System.out.println("IO error: " + ioe);
        }
        return g;
    }

    private static void swap(int[] x, int a, int b) {
        int t = x[a];
        x[a] = x[b];
        x[b] = t;
    }

    private static void shuffle(int[] x) {
        for (int i = x.length; i > 1; i--) {
            swap(x, i - 1, rnd.nextInt(i));
        }
    }

    private static int[][] permute(int[][] m1) {
        int[][] m2 = new int[m1.length][m1[0].length];
        int[] perms = new int[m1.length];

        for (int i = 0; i < perms.length; i++) {
            perms[i] = i;
        }
        shuffle(perms);

        for (int i = 0; i < m1.length; i++) {
            for (int j = 0; j < m1[i].length; j++) {
                m2[i][j] = m1[perms[i]][perms[j]];
            }
        }

        return m2;
    }

    // private static Graph importMatrixDirected(int[][] m) {
    // Graph g = new AdjListGraph();
    // Node[] nodes = new Node[m.length];
    // for (int i = 0; i < nodes.length; i++) {
    // nodes[i] = g.addNode();
    // /*
    // * nodes[i].setInteger("label", i); Attribute attr = new
    // * ColorAttribute(Integer.toString(i)); nodes[i] .addAttribute(attr,
    // * GraphicAttributeConstants.GRAPHICS + Attribute.SEPARATOR +
    // * GraphicAttributeConstants.FILLCOLOR);
    // */
    // }
    // for (int row = 0; row < m.length; row++) {
    // for (int n = 0; n < m[row].length; n++) {
    // if (n > 0) {
    // g.addEdge(nodes[row], nodes[n], true);
    // // e.addInteger("label", Integer.toString(row*100+n),
    // // row*100+n);
    // } else if (n < 0) {
    // g.addEdge(nodes[n], nodes[row], true);
    // // e.addInteger("label", Integer.toString(row*100+n),
    // // row*100+n);
    // }
    // }
    // }
    //
    // return g;
    // }

    private static Graph importMatrixUndirected(int[][] m) {
        Graph g = new FastGraph();
        Node[] nodes = new Node[m.length];
        for (int i = 0; i < nodes.length; i++) {
            nodes[i] = g.addNode();
            nodes[i].setInteger("label", i);

            Attribute attr = new ColorAttribute(
                    GraphicAttributeConstants.FILLCOLOR);
            nodes[i].addAttribute(new HashMapAttribute(
                    GraphicAttributeConstants.GRAPHICS), "");
            nodes[i].addAttribute(attr, GraphicAttributeConstants.GRAPHICS);

        }
        for (int row = 0; row < m.length; row++) {
            for (int n = 0; n < m[row].length; n++) {
                if (m[row][n] != 0) {
                    // e = new AdjListEdge(g, nodes[row], nodes[n], false);
                    g.addEdge(nodes[row], nodes[n], false);
                    // g.addEdge(nodes[n], nodes[row], true);

                    // IntegerAttribute a = new IntegerAttribute(Integer
                    // .toString(row * 100 + n));
                    // e.addAttribute(a, "label");
                    // e.addInteger("label", Integer.toString(row*100+n),
                    // row*100+n);
                }
            }
        }
        return g;
    }

    private static int[][] str2int(String str, int len) throws Exception {
        int[][] a = new int[len][len];
        if (str.length() != (len * len))
            throw new Exception("String has lenght " + str.length()
                    + " but should be " + len * len);
        int row = 0;
        int col = 0;
        for (int i = 0; i < str.length(); i++) {
            a[row][col] = Integer.parseInt(str.substring(i, i + 1));
            if (a[row][col] != 0 && a[row][col] != 1)
                throw new Exception("illegal character");
            if (row == col && a[row][col] != 0)
                throw new Exception("non-zero auf diagonaler");
            col++;
            if (col >= len) {
                col = 0;
                row++;
            }
        }

        for (row = 0; row < len; row++) {
            for (col = 0; col < len; col++)
                if (a[col][row] != a[row][col])
                    throw new Exception("not symetric");
        }

        int deg = 0;
        int d2 = 0;
        for (row = 0; row < len; row++) {
            d2 += a[0][row];
        }

        for (row = 1; row < len; row++) {
            deg = 0;
            for (col = 0; col < len; col++) {
                deg += a[row][col];
            }
            if (deg != d2)
                throw new Exception("wrong degrees");
            else {
                d2 = deg;
            }
        }
        return a;
    }

    public static Graph[] getSRG05a() throws Exception {

        String g = "01100" + "10010" + "10001" + "01001" + "00110";
        int[][] m = str2int(g, 5);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG05b() throws Exception {

        String g = "0100110100010100010110010";
        int[][] m = str2int(g, 5);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG45a() throws Exception {

        String g
        int[][] m = str2int(g, 45);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG17() throws Exception {

        String g = "01111111100000000" + "10111000011110000"
                + "11000110011001100" + "11000101010100011"
                + "11000010100111010" + "10110000101001011"
                + "10101001000101101" + "10010010110010101"
                + "10001101001010110" + "01110001000011110"
                + "01100100100110101" + "01011010001000111"
                + "01001001111001001" + "00101110010010011"
                + "00100011111100010" + "00011100110101100"
                + "00010111001111000";
        int[][] m = str2int(g, 17);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG40() throws Exception {

        String g = "0111111111111000000000000000000000000000"

        int[][] m = str2int(g, 40);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG25() throws Exception {

        String g = "" + "0111111111111000000000000"
                + "1011111000000111111000000" + "1101100110000110000111100"
                + "1110100001100001100110011" + "1111000000011000011001111"
                + "1100000111010101110001010" + "1100000110101011101000101"
                + "1010011001010011000101101" + "1010011000101100100011110"
                + "1001010100011100101110001" + "1001001010011011010110010"
                + "1000110101100010011010110" + "1000101011100100011101001"
                + "0110010011001001011110100" + "0110001100110000111111000"
                + "0101011100100100010100111" + "0101011011000010001011011"
                + "0100110000111111000011001" + "0100101001011110100100110"
                + "0011000101101111001001010" + "0011000011110110110000101"
                + "0010110110001010110100011" + "0010101110010101001010011"
                + "0001110010110001101101100" + "0001101101001001110011100";
        int[][] m = str2int(g, 25);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG45b() throws Exception {

        String g = "011111111111100000000000000000000000000000000"
                + "101110000000011111111000000000000000000000000"
                + "110101000000010000000111111100000000000000000"
                + "111000100000001000000100000011111100000000000"
                + "110001010000000110000000000010000011111000000"
                + "101010001000000000000011000001000011000111000"
                + "100100010100000001000010000000110000100100110"
                + "100010100010000000100000110000100010010000101"
                + "100001000101000000011000100001010000001010001"
                + "100000101000100000011000011000001001100000010"
                + "100000010001110000100000001010000100000101001"
                + "100000001010100101000100000100000100001010100"
                + "100000000111001010000001000100001000010001010"
                + "011000000010000000110001100000000100101100010"
                + "010100000000100101000000100001001010000001011"
                + "010010000001001001000000011000100000101011000"
                + "010010000000100000101010000110010000010010010"
                + "010000100001001100010010000100000001000100101"
                + "010000010010010010001000010001001000000110100"
                + "010000001100010001001001000000100101010000001"
                + "010000001100000010110100001000010010000001100"
                + "001100000001000000001010001000001110011000100"
                + "001001100000000011000100001000000000010110011"
                + "001001000000110000010000000101100000110001100"
                + "001000011000011000000000010100010010001000011"
                + "001000010100000100100000101100101001000010000"
                + "001000000110000100001110010010000000100001001"
                + "001000000001100011000001110010010001000000100"
                + "000110000010000010000000001101010101100000001"
                + "000101001000001000100001000010001000100010101"
                + "000100110000000100010001010000010100010011000"
                + "000100101000000010001000100110100000001101000"
                + "000100000100101000100100010001000001011100000"
                + "000100000011010000010100000010100011000010010"
                + "000011010000001000001100100000000101000001110"
                + "000011000100000001010000010110001110000100000"
                + "000010100100010100000001001011000000001000110"
                + "000010010000100010010111000000101000001000001"
                + "000010001001010100000100100000011000110100000"
                + "000001100010010001100010000000011001001001000"
                + "000001001001000110100010010001100100000000010"
                + "000001000010101100001001001000110010000100000"
                + "000000110001000001101101000101000010100000000"
                + "000000100100111010000010100000000110100010000"
                + "000000011010001001010010101011000000010000000";
        int[][] m = str2int(g, 45);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG36b() throws Exception {
        String g = "011111111111111100000000000000000000"
                + "101111110000000011111111000000000000"
                + "110111110000000000000000111111110000"
                + "111010001110000011100000111000001100"
                + "111100001101000000011100000111001010"
                + "111000100010110010010010100100100011"
                + "111001000001110001001001010010010101"
                + "111000000011001100100111001001110000"
                + "100110000110001101001010010010100011"
                + "100110001001001110010001100100010101"
                + "100101011001100000100010001000101111"
                + "100010110110010000000101000001011111"
                + "100001100010011100111000001110001100"
                + "100001100001101111000100110001001010"
                + "100000011100110111011000001001110000"
                + "100000011100111000100111110110000000"
                + "010101000100011001110100101000010011"
                + "010100101000011010001011011001001001"
                + "010100010010100110010101011010000110"
                + "010011000100101010101001000101100110"
                + "010010101000101001010110000010111100"
                + "010010010001010110101010100010011010"
                + "010001011010000101001101100100101001"
                + "010000110101000101110010010101000101"
                + "001101000100010110000110010100111100"
                + "001100101000010101100001100011100110"
                + "001100010010101011100000000111011001"
                + "001011000100100100010011101011001001"
                + "001010101000100100101100011100010011"
                + "001010010001011001010001011100101010"
                + "001001011010001000011010110001010110"
                + "001000110101001010001100101010100101"
                + "000110000011110001001110101101000100"
                + "000100100111100000111001110000111000"
                + "000011001011010010110100010011100001"
                + "000001101111000011000011001110010010";
        int[][] m = str2int(g, 36);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG09() throws Exception {
        String g = "011110000" + "101001100" + "110000011" + "100011010"
                + "100100101" + "010100110" + "010011001" + "001101001"
                + "001010110";
        int[][] m = str2int(g, 9);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    /**
     * taken from http://www.maths.gla.ac.uk/~es/srgraphs.html
     * 
     * @throws Exception
     */
    public static Graph[] getSRG64() throws Exception {

        String g = "0111111111111111111000000000000000000000000000000000000000000000"
                + "1011000000000000000111111111111111000000000000000000000000000000"
                + "1101000000000000000000000000000000111111111111111000000000000000"
                + "1110000000000000000000000000000000000000000000000111111111111111"
                + "1000011000000000000111110000000000111110000000000111110000000000"
                + "1000101000000000000000001111100000000001111100000000001111100000"
                + "1000110000000000000000000000011111000000000011111000000000011111"
                + "1000000011000000000111001000010000100001110010000100001000011100"
                + "1000000101000000000000100111001000010000001001110011100100000010"
                + "1000000110000000000000010000100111001110000100001000010011100001"
                + "1000000000011000000111000100000100001001001100001010000100010011"
                + "1000000000101000000000100010011010110100100010000001000011101000"
                + "1000000000110000000000011001100001000010010001110100111000000100"
                + "1000000000000011000100110010001000000011110001000000010010010011"
                + "1000000000000101000010001001110000001000000110101011100001001000"
                + "1000000000000110000001000100000111110100001000010100001100100100"
                + "1000000000000000011100110000100001010001001100010001000001011100"
                + "1000000000000000101010001000011010001110010001000010001100100010"
                + "1000000000000000110001000111000100100000100010101100110010000001"
                + "0100100100100100100000000001000010000100000011011000101111000000"
                + "0100100100100010010000000010000001010000101001100000010001100101"
                + "0100100100100001001000000000101000000010010100110001000010101010"
                + "0100100010010100100000001000000100001000010110100100000100100101"
                + "0100100001001100100000000100010000100000101000101010001000101010"
                + "0100010100001010010000100000000100100100001000011001010010010010"
                + "0100010010100001001000010000010000001100010011000001010001010100"
                + "0100010010010100001010000000000001000110000100011110001000011000"
                + "0100010010001010001100000000000010111011000000000000000000101111"
                + "0100010001001010100001000000001000010100100011000110000100010001"
                + "0100001100010010010000010100000000010011000100010100100110000001"
                + "0100001010010100010001000000100000101001001000001000111001000100"
                + "0100001001100001001000101000000000010011100001000010101001001000"
                + "0100001001010001010100000001000000000000111100100111010000010000"
                + "0100001001001001100010000010000000101001010010000001100110000010"
                + "0010100100010001001000011001001001000000000101000010000101010001"
                + "0010100010010001100010000001110100000000010000001000011010010010"
                + "0010100001100010010000100101001001000000100000010100001010011000"
                + "0010100001010001010100001110100000000001000000100000100000001111"
                + "0010100001001100010001000011010100000000001010000001000101010100"
                + "0010010100100100100000000001011101000100000000100111010000100000"
                + "0010010100010100001010010000100110001000000000010001100100000110"
                + "0010010100001100010001100100000011010000000000001010100001001001"
                + "0010010010100001100010011000001010000010000010000100100010001001"
                + "0010010001100010100001100010010010100000000001000000111000000110"
                + "0010001100010010001100100100100001000010001000000010011000100010"
                + "0010001010001100010110000100100100100000000100000101000010101000"
                + "0010001010001010001011110000000010000101000000000000001111010000"
                + "0010001010001001100101001010010000001000100000000010010001100001"
                + "0010001001100010001100011010001000010000010000000101000100100100"
                + "0001100100001001001000100010110010001001001001001000000001000010"
                + "0001100010100010010000010010100110100001010010010000000010000100"
                + "0001100010010010100001001100000011000011100001001000001000000001"
                + "0001100010001010001100000000011101000100111100000000000000110000"
                + "0001100001001100001010001100001010010001000110010000000100001000"
                + "0001010100001001010100010010001100011000000110100001000000000001"
                + "0001010010100001010100100000110001100010100000101000010000001000"
                + "0001010001010100001101001000010001011000001001100010000000000100"
                + "0001010001010010100110000100001100100010010000110100000000000010"
                + "0001010001010001010011110001000000000001000011011000100000010000"
                + "0001001100100100100000001110100010111010000000100000100000100000"
                + "0001001100010010100001010011000100001100011001000000010100000000"
                + "0001001100001001100010100101001000000110100100001010000010000000"
                + "0001001010100100010001011001000001010100100110000100000001000000"
                + "0001001001100100001010100001110000100100011000010001001000000000";
        int[][] m = str2int(g, 64);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG64b() throws Exception {
        String g = "0111111111111111111000000000000000000000000000000000000000000000"
                + "1011000000000000000111111111111111000000000000000000000000000000"
                + "1101000000000000000000000000000000111111111111111000000000000000"
                + "1110000000000000000000000000000000000000000000000111111111111111"
                + "1000011000000000000111110000000000111110000000000111110000000000"
                + "1000101000000000000000001111100000000001111100000000001111100000"
                + "1000110000000000000000000000011111000000000011111000000000011111"
                + "1000000011000000000111001100000000110001000011000000001100011100"
                + "1000000101000000000000100011011000001000110000110111000010000010"
                + "1000000110000000000000010000100111000110001100001000110001100001"
                + "1000000000011000000111000010100000000100110010100000100001010011"
                + "1000000000100100000000101001010100001010001010001100011100001000"
                + "1000000000100010000000000110000111100011000001010111001000100000"
                + "1000000000010001000100010000101010100001100101000010010010000110"
                + "1000000000001001000010110001010000010100001100100000000010111100"
                + "1000000000000110000001001100001001011000010000011001100101000001"
                + "1000000000000000011100001011000001110010001000001010000010010011"
                + "1000000000000000101010110000100010001000010011010100000101100100"
                + "1000000000000000110001000100011100000101100100100001111000001000"
                + "0100100100100100100000000000010001001000001100110001001001100100"
                + "0100100100100010010000000000001100000001101000011010010110000001"
                + "0100100100100001001000000001000010000010010101001100000010101010"
                + "0100100010010010010000000100000001100000100101001000101001010010"
                + "0100100001000110010000001010000000000011010010100001001000001011"
                + "0100010100010001100000010000000100000100100001110110100000110000"
                + "0100010100001001001000100000100000001010001010100010010000000111"
                + "0100010010101000100000010000001000011000000101001000110100001100"
                + "0100010010010010100001000000000010100101000010010001010001000101"
                + "0100010001100100010000000100010000110100000000011101000010011000"
                + "0100001010010010001100000000100000010011010001000010100100100001"
                + "0100001010000101001010000010000000100110001010000100001001110000"
                + "0100001001011000001010001000000000111000010100000001000011000110"
                + "0100001001001100010001000001000000011000101000100010101100010000"
                + "0100001001001001100100100000000000000101110010000100010110001000"
                + "0010100100001100100000100001101100000000010000100000100100101001"
                + "0010100100000011100000000010110110000000100010000100011001000010"
                + "0010100010010001010100000110000110000101000000000000000010111001"
                + "0010100001100010001000001001101001001000000001000010001100000110"
                + "0010100001011000100001010100011000000000100000010000000111010100"
                + "0010010100001100001010010001010001001000000000001100100001010010"
                + "0010010010100100001010101000000011010010000000000001000000101101"
                + "0010010010100001010001010000010101100000001000000010011000010100"
                + "0010010001010010100110000100001010000000010001000101100000001010"
                + "0010010001000110001101100010000100000000000010010110000100010001"
                + "0010001100110000010000010101001001010000000100000011100010100000"
                + "0010001100001100010001101010010000000100001000000001010011000001"
                + "0010001010100010001100011100000010100000000000001100010111000000"
                + "0010001010001001010110001001100000000010000100000000111000001010"
                + "0010001001010001100011100010100000000001000000100011001000100100"
                + "0001100010011000010001001000101001010001001100100000000000000101"
                + "0001100010001100100010001100010010000100010110001000000001001000"
                + "0001100010001001001100010001100100000000101011001000000100010000"
                + "0001100001100001001000101010010010100001001010010000000010000100"
                + "0001100001010100001010000111000001010000010001110000000000110000"
                + "0001010100011000001100110000001010010100010000011000000010000001"
                + "0001010100010001010010000010010011100110000100100001000000000010"
                + "0001010010000110100011000000100101001010000011100000101000000000"
                + "0001010001100001010100100001001100010011000001100010000000001000"
                + "0001010001001010010101001000011000101000100010001000010000000010"
                + "0001001100100010100000101000101010001011010100000001010000000000"
                + "0001001100010010001001010010100001101000101000010010000001000000"
                + "0001001100000110010100000111000100000110110000001100100000000000"
                + "0001001010100100100001110100000100010101001000010000000100100000"
                + "0001001001100001100010010101010000101000100101000100001000000000";
        int[][] m = str2int(g, 64);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static Graph[] getSRG36a() throws Exception {
        String g = "" + "011111111110000000000000000000000000"
                + "101111000001111100000000000000000000"
                + "110111000000000011111000000000000000"
                + "111011000000000000000111110000000000"
                + "111101000000000000000000001111100000"
                + "111110000000000000000000000000011111"
                + "100000011111000010000100001000010000"
                + "100000101110100001000010000100001000"
                + "100000110110010000100001000010000100"
                + "100000111010001000010000100001000010"
                + "100000111100000100001000010000100001"
                + "010000100000111110000100001000010000"
                + "010000010001011101000010000100001000"
                + "010000001001101100100001000010000100"
                + "010000000101110100010000100001000010"
                + "010000000011111000001000010000100001"
                + "001000100001000001111100001000010000"
                + "001000010000100010111010000100001000"
                + "001000001000010011011001000010000100"
                + "001000000100001011101000100001000010"
                + "001000000010000111110000010000100001"
                + "000100100001000010000011111000010000"
                + "000100010000100001000101110100001000"
                + "000100001000010000100110110010000100"
                + "000100000100001000010111010001000010"
                + "000100000010000100001111100000100001"
                + "000010100001000010000100000111110000"
                + "000010010000100001000010001011101000"
                + "000010001000010000100001001101100100"
                + "000010000100001000010000101110100010"
                + "000010000010000100001000011111000001"
                + "000001100001000010000100001000001111"
                + "000001010000100001000010000100010111"
                + "000001001000010000100001000010011011"
                + "000001000100001000010000100001011101"
                + "000001000010000100001000010000111110";
        int[][] m = str2int(g, 36);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    public static void writeGraph(Graph g, String path) {
        GraphMLWriter gw = new GraphMLWriter();
        File file1 = new File(path);
        OutputStream os = null;

        try {
            os = new FileOutputStream(file1);
        } catch (FileNotFoundException exp) {
            exp.printStackTrace();
        }

        try {
            gw.write(os, g);
        } catch (IOException exp) {
            exp.printStackTrace();
        }
    }

    public static Graph[] getSRG36c() throws Exception {
        String g = "011111111111111100000000000000000000"
                + "101111110000000011111111000000000000"
                + "110111101000000010000000111111100000"
                + "111011000110000001100000110000011110"
                + "111100010101000000011000001110011001"
                + "111100001000110000000111001001010110"
                + "111000000010101111010100100101000001"
                + "110010001001001101001110000010101100"
                + "101001010001011000001010110001100011"
                + "100110000011010100100101010110000011"
                + "100100100101100110100010100000110101"
                + "100010011110010010010001000001101101"
                + "100001100010011110011000001010010110"
                + "100001001101101001110001001100100010"
                + "100000111000110101101000010101011000"
                + "100000110110101000000111111010001000"
                + "011000100011100000111001010011100100"
                + "010100110000011000110100100100101110"
                + "010100000110011011001011010100110000"
                + "010010100001110011001001101000001011"
                + "010010011000101010110010010010010011"
                + "010001110100000101000011000111000111"
                + "010001011010000100101101101000110001"
                + "010001000101010110110110011001001000"
                + "001100101010000101010010011000101011"
                + "001100001100001110101001100011001010"
                + "001011000000110100010011100110111000"
                + "001010100100011001100100001011110001"
                + "001010010100100110001100011100100110"
                + "001001101001001010000101010100011101"
                + "001000011011010011100010101110000100"
                + "000111000010101000101010001101001101"
                + "000110010001001101010001111001010100"
                + "000101010011100011000100000011111010"
                + "000101001100110001011100110010000101"
                + "000010101111000000011110100101010010";

        int[][] m = str2int(g, 36);
        Graph[] a = new Graph[2];
        a[0] = importMatrixUndirected(m);
        a[1] = importMatrixUndirected(permute(m));
        return a;
    }

    private static int[][] generateSquareGrid(int w) {
        int tot = w * w;
        int[][] g = new int[tot][tot];
        for (int i = 0; i < tot; i++) {
            for (int j = 0; j < tot; j++) {
                if (j == (i + 1) && (((j % w) != 0) || (i == 0))) {
                    g[i][j] = 1;
                    g[j][i] = 1;
                }
                if (j == (i + w)) {
                    g[i][j] = 1;
                    g[j][i] = 1;
                }
            }
        }
        return g;
    }

    public static Graph[] getGrid30() {
        int[][] g = generateSquareGrid(30);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;

    }

    public static Graph[] getGrid20() {
        int[][] g = generateSquareGrid(20);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;

    }

    public static Graph[] getGrid40() {
        int[][] g = generateSquareGrid(40);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;

    }

    public static Graph[] getGrid10() {
        int[][] g = generateSquareGrid(10);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;

    }

    public static Graph[] getGrid11() {
        int[][] g = generateSquareGrid(11);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph[] getGrid13() {
        int[][] g = generateSquareGrid(13);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph[] getGrid15() {
        int[][] g = generateSquareGrid(15);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph[] getGrid21() {
        int[][] g = generateSquareGrid(21);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph[] getGrid27() {
        int[][] g = generateSquareGrid(27);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph[] getGrid24() {
        int[][] g = generateSquareGrid(24);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph[] getGrid31() {
        int[][] g = generateSquareGrid(31);

        Graph[] gr = new Graph[2];
        gr[0] = importMatrixUndirected(g);
        gr[1] = importMatrixUndirected(permute(g));

        return gr;
    }

    public static Graph getLibGraph(File f) {
        return importMatrixUndirected(readGraph(f.getAbsolutePath()));
    }

    public static void main(String args[]) {
        File f = new File(args[0]);
        Graph g = getLibGraph(f);
        System.out.println("Nodes: " + g.getNumberOfNodes());
        System.out.println("Edges: " + g.getNumberOfEdges());
        System.out.println("Dir Edges: " + g.getNumberOfDirectedEdges());
        System.out.println("Undir Edges: " + g.getNumberOfUndirectedEdges());

    }

}