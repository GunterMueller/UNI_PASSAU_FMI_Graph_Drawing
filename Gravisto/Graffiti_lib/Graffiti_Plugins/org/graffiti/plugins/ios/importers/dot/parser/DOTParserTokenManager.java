/* Generated By:JJTree&JavaCC: Do not edit this line. DOTParserTokenManager.java */
package org.graffiti.plugins.ios.importers.dot.parser;

public class DOTParserTokenManager implements DOTParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
        case 9:
            jjmatchedKind = 2;
            return jjMoveNfa_0(0, 0);
        case 10:
            jjmatchedKind = 3;
            return jjMoveNfa_0(0, 0);
        case 12:
            jjmatchedKind = 5;
            return jjMoveNfa_0(0, 0);
        case 13:
            jjmatchedKind = 4;
            return jjMoveNfa_0(0, 0);
        case 32:
            jjmatchedKind = 1;
            return jjMoveNfa_0(0, 0);
        case 44:
            jjmatchedKind = 24;
            return jjMoveNfa_0(0, 0);
        case 45:
            return jjMoveStringLiteralDfa1_0(0x300000L);
        case 47:
            return jjMoveStringLiteralDfa1_0(0xc0L);
        case 59:
            jjmatchedKind = 25;
            return jjMoveNfa_0(0, 0);
        case 61:
            jjmatchedKind = 17;
            return jjMoveNfa_0(0, 0);
        case 68:
            return jjMoveStringLiteralDfa1_0(0x800L);
        case 69:
            return jjMoveStringLiteralDfa1_0(0x1000L);
        case 71:
            return jjMoveStringLiteralDfa1_0(0x2000L);
        case 78:
            return jjMoveStringLiteralDfa1_0(0x4000L);
        case 83:
            return jjMoveStringLiteralDfa1_0(0x18000L);
        case 91:
            jjmatchedKind = 22;
            return jjMoveNfa_0(0, 0);
        case 93:
            jjmatchedKind = 23;
            return jjMoveNfa_0(0, 0);
        case 100:
            return jjMoveStringLiteralDfa1_0(0x800L);
        case 101:
            return jjMoveStringLiteralDfa1_0(0x1000L);
        case 103:
            return jjMoveStringLiteralDfa1_0(0x2000L);
        case 110:
            return jjMoveStringLiteralDfa1_0(0x4000L);
        case 115:
            return jjMoveStringLiteralDfa1_0(0x18000L);
        case 123:
            jjmatchedKind = 18;
            return jjMoveNfa_0(0, 0);
        case 125:
            jjmatchedKind = 19;
            return jjMoveNfa_0(0, 0);
        default:
            return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 0);
        }
        switch (curChar) {
        case 42:
            if ((active0 & 0x80L) != 0L) {
                jjmatchedKind = 7;
                jjmatchedPos = 1;
            }
            break;
        case 45:
            if ((active0 & 0x100000L) != 0L) {
                jjmatchedKind = 20;
                jjmatchedPos = 1;
            }
            break;
        case 47:
            if ((active0 & 0x40L) != 0L) {
                jjmatchedKind = 6;
                jjmatchedPos = 1;
            }
            break;
        case 62:
            if ((active0 & 0x200000L) != 0L) {
                jjmatchedKind = 21;
                jjmatchedPos = 1;
            }
            break;
        case 68:
            return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
        case 73:
            return jjMoveStringLiteralDfa2_0(active0, 0x800L);
        case 79:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
        case 82:
            return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
        case 84:
            return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
        case 85:
            return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
        case 100:
            return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
        case 105:
            return jjMoveStringLiteralDfa2_0(active0, 0x800L);
        case 111:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
        case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
        case 116:
            return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
        case 117:
            return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 1);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 1);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
        case 66:
            return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
        case 68:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
        case 71:
            return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
        case 82:
            return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
        case 97:
            return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
        case 98:
            return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
        case 100:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
        case 103:
            return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
        case 114:
            return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 2);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 2);
        }
        switch (curChar) {
        case 69:
            if ((active0 & 0x1000L) != 0L) {
                jjmatchedKind = 12;
                jjmatchedPos = 3;
            } else if ((active0 & 0x4000L) != 0L) {
                jjmatchedKind = 14;
                jjmatchedPos = 3;
            }
            break;
        case 71:
            return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
        case 73:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
        case 80:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
        case 82:
            return jjMoveStringLiteralDfa4_0(active0, 0x800L);
        case 101:
            if ((active0 & 0x1000L) != 0L) {
                jjmatchedKind = 12;
                jjmatchedPos = 3;
            } else if ((active0 & 0x4000L) != 0L) {
                jjmatchedKind = 14;
                jjmatchedPos = 3;
            }
            break;
        case 103:
            return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
        case 105:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
        case 112:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
        case 114:
            return jjMoveStringLiteralDfa4_0(active0, 0x800L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 3);
    }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 3);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 3);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa5_0(active0, 0x800L);
        case 67:
            return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
        case 72:
            if ((active0 & 0x2000L) != 0L) {
                jjmatchedKind = 13;
                jjmatchedPos = 4;
            }
            break;
        case 82:
            return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
        case 97:
            return jjMoveStringLiteralDfa5_0(active0, 0x800L);
        case 99:
            return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
        case 104:
            if ((active0 & 0x2000L) != 0L) {
                jjmatchedKind = 13;
                jjmatchedPos = 4;
            }
            break;
        case 114:
            return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 4);
    }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 4);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 4);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
        case 80:
            return jjMoveStringLiteralDfa6_0(active0, 0x800L);
        case 84:
            if ((active0 & 0x8000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 5;
            }
            break;
        case 97:
            return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
        case 112:
            return jjMoveStringLiteralDfa6_0(active0, 0x800L);
        case 116:
            if ((active0 & 0x8000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 5;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 5);
    }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 5);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 5);
        }
        switch (curChar) {
        case 72:
            if ((active0 & 0x800L) != 0L) {
                jjmatchedKind = 11;
                jjmatchedPos = 6;
            }
            break;
        case 80:
            return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
        case 104:
            if ((active0 & 0x800L) != 0L) {
                jjmatchedKind = 11;
                jjmatchedPos = 6;
            }
            break;
        case 112:
            return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 6);
    }

    private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 6);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 6);
        }
        switch (curChar) {
        case 72:
            if ((active0 & 0x10000L) != 0L) {
                jjmatchedKind = 16;
                jjmatchedPos = 7;
            }
            break;
        case 104:
            if ((active0 & 0x10000L) != 0L) {
                jjmatchedKind = 16;
                jjmatchedPos = 7;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 7);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    // private final void jjCheckNAddStates(int start)
    // {
    // jjCheckNAdd(jjnextStates[start]);
    // jjCheckNAdd(jjnextStates[start + 1]);
    // }
    static final long[] jjbitVec0 = { 0x0L, 0xffffffffffffc000L,
            0xfffff0007fffffffL, 0x7fffffL };
    static final long[] jjbitVec2 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec3 = { 0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL,
            0xffffffffffffffffL, 0xfc31ffffffffe00fL };
    static final long[] jjbitVec4 = { 0xffffffL, 0xffffffffffff0000L,
            0xf80001ffffffffffL, 0x3L };
    static final long[] jjbitVec5 = { 0x0L, 0x0L, 0xfffffffbffffd740L,
            0xffffd547f7fffL };
    static final long[] jjbitVec6 = { 0xffffffffffffdffeL, 0xffffffffdffeffffL,
            0xffffffffffff0003L, 0x33fcfffffff199fL };
    static final long[] jjbitVec7 = { 0xfffe000000000000L, 0xfffffffe027fffffL,
            0x7fL, 0x707ffffff0000L };
    static final long[] jjbitVec8 = { 0x7fffffe00000000L, 0xfffe03ff000007feL,
            0x7cffffffffffffffL, 0x3ff0060002f7fffL };
    static final long[] jjbitVec9 = { 0x23ffffffffffffe0L, 0xffc3ff000000L,
            0x3c5fdfffff99fe0L, 0x3ffc3b0000000L };
    static final long[] jjbitVec10 = { 0x36dfdfffff987e0L, 0x1cffc05e000000L,
            0x23edfdfffffbafe0L, 0xffc100000000L };
    static final long[] jjbitVec11 = { 0x23cdfdfffff99fe0L, 0xffc3b0000000L,
            0x3bfc718d63dc7e0L, 0xff8000000000L };
    static final long[] jjbitVec12 = { 0x3effdfffffddfe0L, 0xffc300000000L,
            0x3effdfffffddfe0L, 0xffc340000000L };
    static final long[] jjbitVec13 = { 0x3fffdfffffddfe0L, 0xffc300000000L,
            0x0L, 0x0L };
    static final long[] jjbitVec14 = { 0xd7ffffffffffeL, 0x3ff003fL,
            0x200d6caefef02596L, 0x3ff001fL };
    static final long[] jjbitVec15 = { 0x3ff00000000L, 0x3fffffffeffL, 0x0L,
            0x0L };
    static final long[] jjbitVec16 = { 0x0L, 0x0L, 0xffffffff00000000L,
            0x7fffffffff003fL };
    static final long[] jjbitVec17 = { 0x500000000007daedL, 0x2c62ab82315001L,
            0xf580c90040000000L, 0x201080000000007L };
    static final long[] jjbitVec18 = { 0xffffffffffffffffL,
            0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL };
    static final long[] jjbitVec19 = { 0xffffffff3f3fffffL,
            0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL };
    static final long[] jjbitVec20 = { 0x4c4000000000L, 0x0L, 0x7L, 0x0L };
    static final long[] jjbitVec21 = { 0x3fe00000080L, 0xfffffffffffffffeL,
            0xfffffffe001fffffL, 0x7ffffffffffffffL };
    static final long[] jjbitVec22 = { 0x1fffffffffe0L, 0x0L, 0x0L, 0x0L };
    static final long[] jjbitVec23 = { 0xffffffffffffffffL,
            0xffffffffffffffffL, 0x3fffffffffL, 0x0L };
    static final long[] jjbitVec24 = { 0xffffffffffffffffL,
            0xffffffffffffffffL, 0xfffffffffL, 0x0L };
    static final long[] jjbitVec25 = { 0xfffffffffffffffeL,
            0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec26 = { 0x0L, 0x0L, 0xffffffffffffffffL,
            0xffffffffffffffffL };
    static final long[] jjbitVec27 = { 0x1600L, 0x0L, 0x0L, 0x0L };
    static final long[] jjbitVec28 = { 0x0L, 0xffc000000000L, 0x0L,
            0xffc000000000L };
    static final long[] jjbitVec29 = { 0x0L, 0x3ff00000000L, 0x0L,
            0x3ff000000000000L };
    static final long[] jjbitVec30 = { 0x0L, 0xffc000000000L, 0x0L,
            0xff8000000000L };
    static final long[] jjbitVec31 = { 0x0L, 0xffc000000000L, 0x0L, 0x0L };
    static final long[] jjbitVec32 = { 0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L };
    static final long[] jjbitVec33 = { 0x3ff00000000L, 0x0L, 0x0L, 0x0L };

    private final int jjMoveNfa_0(int startState, int curPos) {
        int strKind = jjmatchedKind;
        int strPos = jjmatchedPos;
        int seenUpto;
        input_stream.backup(seenUpto = curPos + 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            throw new Error("Internal Error");
        }
        curPos = 0;
        // int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 26;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 26) {
                                kind = 26;
                            }
                            jjCheckNAddTwoStates(9, 10);
                        } else if (curChar == 60) {
                            jjCheckNAddStates(0, 3);
                        } else if (curChar == 46) {
                            jjCheckNAdd(14);
                        } else if (curChar == 45) {
                            jjstateSet[jjnewStateCnt++] = 13;
                        } else if (curChar == 34) {
                            jjCheckNAddStates(4, 6);
                        }
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 26) {
                                kind = 26;
                            }
                            jjCheckNAdd(1);
                        }
                        break;
                    case 1:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(1);
                        break;
                    case 2:
                        if (curChar == 34) {
                            jjCheckNAddStates(4, 6);
                        }
                        break;
                    case 3:
                        if ((0xfffffffbffffdbffL & l) != 0L) {
                            jjCheckNAddStates(4, 6);
                        }
                        break;
                    case 5:
                        if ((0xffffffff00002400L & l) != 0L) {
                            jjCheckNAddStates(4, 6);
                        }
                        break;
                    case 6:
                        if (curChar == 34 && kind > 26) {
                            kind = 26;
                        }
                        break;
                    case 7:
                        if (curChar == 10) {
                            jjCheckNAddStates(4, 6);
                        }
                        break;
                    case 8:
                        if (curChar == 13) {
                            jjstateSet[jjnewStateCnt++] = 7;
                        }
                        break;
                    case 9:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAddTwoStates(9, 10);
                        break;
                    case 10:
                        if (curChar != 46) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(11);
                        break;
                    case 11:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(11);
                        break;
                    case 12:
                        if (curChar == 45) {
                            jjstateSet[jjnewStateCnt++] = 13;
                        }
                        break;
                    case 13:
                        if (curChar == 46) {
                            jjCheckNAdd(14);
                        }
                        break;
                    case 14:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(14);
                        break;
                    case 15:
                        if (curChar == 60) {
                            jjCheckNAddStates(0, 3);
                        }
                        break;
                    case 16:
                        if (curChar == 60) {
                            jjCheckNAddTwoStates(17, 18);
                        }
                        break;
                    case 17:
                        if ((0xbfffffffffffffffL & l) != 0L) {
                            jjCheckNAddTwoStates(17, 18);
                        }
                        break;
                    case 18:
                        if (curChar == 62) {
                            jjCheckNAddStates(7, 9);
                        }
                        break;
                    case 19:
                        if ((0xafffffffffffffffL & l) != 0L) {
                            jjCheckNAddStates(7, 9);
                        }
                        break;
                    case 20:
                        if (curChar == 62 && kind > 26) {
                            kind = 26;
                        }
                        break;
                    case 21:
                        if (curChar == 60) {
                            jjCheckNAddTwoStates(22, 23);
                        }
                        break;
                    case 22:
                        if ((0xbfffffffffffffffL & l) != 0L) {
                            jjCheckNAddTwoStates(22, 23);
                        }
                        break;
                    case 23:
                        if (curChar == 62) {
                            jjCheckNAddStates(10, 12);
                        }
                        break;
                    case 24:
                        if ((0xafffffffffffffffL & l) != 0L) {
                            jjCheckNAddStates(10, 12);
                        }
                        break;
                    case 25:
                        if (curChar == 62 && kind > 27) {
                            kind = 27;
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(1);
                        break;
                    case 1:
                        if ((0x7fffffe87fffffeL & l) == 0L) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(1);
                        break;
                    case 3:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(4, 6);
                        }
                        break;
                    case 4:
                        if (curChar == 92) {
                            jjAddStates(13, 14);
                        }
                        break;
                    case 5:
                        if ((0x7fffffffffffffffL & l) != 0L) {
                            jjCheckNAddStates(4, 6);
                        }
                        break;
                    case 17:
                        jjAddStates(15, 16);
                        break;
                    case 19:
                        jjAddStates(7, 9);
                        break;
                    case 22:
                        jjAddStates(17, 18);
                        break;
                    case 24:
                        jjAddStates(10, 12);
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            if (kind > 26) {
                                kind = 26;
                            }
                            jjCheckNAdd(1);
                        }
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            if (kind > 26) {
                                kind = 26;
                            }
                            jjCheckNAddTwoStates(9, 10);
                        }
                        break;
                    case 1:
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAdd(1);
                        break;
                    case 3:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(4, 6);
                        }
                        break;
                    case 9:
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjCheckNAddTwoStates(9, 10);
                        break;
                    case 11:
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjstateSet[jjnewStateCnt++] = 11;
                        break;
                    case 14:
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            break;
                        }
                        if (kind > 26) {
                            kind = 26;
                        }
                        jjstateSet[jjnewStateCnt++] = 14;
                        break;
                    case 17:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(15, 16);
                        }
                        break;
                    case 19:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(7, 9);
                        }
                        break;
                    case 22:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(17, 18);
                        }
                        break;
                    case 24:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(10, 12);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt))) {
                break;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                break;
            }
        }
        if (jjmatchedPos > strPos)
            return curPos;

        int toRet = Math.max(curPos, seenUpto);

        if (curPos < toRet) {
            for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;) {
                try {
                    curChar = input_stream.readChar();
                } catch (java.io.IOException e) {
                    throw new Error(
                            "Internal Error : Please send a bug report.");
                }
            }
        }

        if (jjmatchedPos < strPos) {
            jjmatchedKind = strKind;
            jjmatchedPos = strPos;
        } else if (jjmatchedPos == strPos && jjmatchedKind > strKind) {
            jjmatchedKind = strKind;
        }

        return toRet;
    }

    private final int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
        case 42:
            return jjMoveStringLiteralDfa1_2(0x200L);
        default:
            return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
        case 47:
            if ((active0 & 0x200L) != 0L)
                return jjStopAtPos(1, 9);
            break;
        default:
            return 2;
        }
        return 2;
    }

    private final int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private final int jjMoveNfa_1(int startState, int curPos) {
        // int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        // int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x2400L & l) != 0L) {
                            if (kind > 8) {
                                kind = 8;
                            }
                        }
                        if (curChar == 13) {
                            jjstateSet[jjnewStateCnt++] = 1;
                        }
                        break;
                    case 1:
                        if (curChar == 10 && kind > 8) {
                            kind = 8;
                        }
                        break;
                    case 2:
                        if (curChar == 13) {
                            jjstateSet[jjnewStateCnt++] = 1;
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                do {
                    switch (jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                // int hiByte = (curChar >> 8);
                // int i1 = hiByte >> 6;
                // long l1 = 1L << (hiByte & 077);
                // int i2 = (curChar & 0xff) >> 6;
                // long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 16, 20, 21, 25, 3, 4, 6, 16, 19, 20,
            21, 24, 25, 5, 8, 17, 18, 22, 23, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
            long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec2[i2] & l2) != 0L);
        case 1:
            return ((jjbitVec3[i2] & l2) != 0L);
        case 2:
            return ((jjbitVec4[i2] & l2) != 0L);
        case 3:
            return ((jjbitVec5[i2] & l2) != 0L);
        case 4:
            return ((jjbitVec6[i2] & l2) != 0L);
        case 5:
            return ((jjbitVec7[i2] & l2) != 0L);
        case 6:
            return ((jjbitVec8[i2] & l2) != 0L);
        case 9:
            return ((jjbitVec9[i2] & l2) != 0L);
        case 10:
            return ((jjbitVec10[i2] & l2) != 0L);
        case 11:
            return ((jjbitVec11[i2] & l2) != 0L);
        case 12:
            return ((jjbitVec12[i2] & l2) != 0L);
        case 13:
            return ((jjbitVec13[i2] & l2) != 0L);
        case 14:
            return ((jjbitVec14[i2] & l2) != 0L);
        case 15:
            return ((jjbitVec15[i2] & l2) != 0L);
        case 16:
            return ((jjbitVec16[i2] & l2) != 0L);
        case 17:
            return ((jjbitVec17[i2] & l2) != 0L);
        case 30:
            return ((jjbitVec18[i2] & l2) != 0L);
        case 31:
            return ((jjbitVec19[i2] & l2) != 0L);
        case 33:
            return ((jjbitVec20[i2] & l2) != 0L);
        case 48:
            return ((jjbitVec21[i2] & l2) != 0L);
        case 49:
            return ((jjbitVec22[i2] & l2) != 0L);
        case 159:
            return ((jjbitVec23[i2] & l2) != 0L);
        case 215:
            return ((jjbitVec24[i2] & l2) != 0L);
        default:
            if ((jjbitVec0[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2,
            long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec26[i2] & l2) != 0L);
        default:
            if ((jjbitVec25[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2,
            long l1, long l2) {
        switch (hiByte) {
        case 6:
            return ((jjbitVec29[i2] & l2) != 0L);
        case 11:
            return ((jjbitVec30[i2] & l2) != 0L);
        case 13:
            return ((jjbitVec31[i2] & l2) != 0L);
        case 14:
            return ((jjbitVec32[i2] & l2) != 0L);
        case 15:
            return ((jjbitVec33[i2] & l2) != 0L);
        default:
            if ((jjbitVec27[i1] & l1) != 0L)
                if ((jjbitVec28[i2] & l2) == 0L)
                    return false;
                else
                    return true;
            return false;
        }
    }

    public static final String[] jjstrLiteralImages = { "", null, null, null,
            null, null, null, null, null, null, null, null, null, null, null,
            null, null, "\75", "\173", "\175", "\55\55", "\55\76", "\133",
            "\135", "\54", "\73", null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, };
    public static final String[] lexStateNames = { "DEFAULT",
            "IN_SINGLE_LINE_COMMENT", "IN_MULTI_LINE_COMMENT", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 2,
            0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xffff801L, };
    static final long[] jjtoSkip = { 0x33eL, };
    static final long[] jjtoSpecial = { 0x300L, };
    static final long[] jjtoMore = { 0x4c0L, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[26];
    private final int[] jjstateSet = new int[52];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;

    public DOTParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error(
                    "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public DOTParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 26; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 3 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : "
                    + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else {
            curLexState = lexState;
        }
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        // int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            for (;;) {
                switch (curLexState) {
                case 0:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                        jjmatchedKind = 10;
                    }
                    break;
                case 2:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();
                    if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                        jjmatchedKind = 10;
                    }
                    break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) {
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    }
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null) {
                                specialToken = matchedToken;
                            } else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else {
                            SkipLexicalActions(null);
                        }
                        if (jjnewLexState[jjmatchedKind] != -1) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        continue EOFLoop;
                    }
                    jjimageLen += jjmatchedPos + 1;
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else {
                        error_column++;
                    }
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line,
                        error_column, error_after, curChar,
                        TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
        default:
            break;
        }
    }
}
