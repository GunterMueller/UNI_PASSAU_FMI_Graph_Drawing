//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Mar 15 11:00:21 CET 2004
//----------------------------------------------------

package de.chris.plugins.inputserializers.test;

import java.util.HashMap;

import org.graffiti.attributes.AttributeNotFoundException;
import org.graffiti.graph.AdjListGraph;
import org.graffiti.graph.Edge;
import org.graffiti.graph.Graph;
import org.graffiti.graph.Node;
import org.graffiti.graphics.EdgeGraphicAttribute;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Mon Mar 15 11:00:21 CET 2004
 */
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\007\000\002\003\006\000\002\002\004\000\002\005"
            + "\004\000\002\005\003\000\002\004\004\000\002\004\007"
            + "\000\002\004\013" });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\031\000\004\005\005\001\002\000\004\002\033\001"
            + "\002\000\004\012\006\001\002\000\010\011\012\014\011"
            + "\015\010\001\002\000\012\011\ufffe\013\ufffe\014\ufffe\015"
            + "\ufffe\001\002\000\004\012\023\001\002\000\004\012\017"
            + "\001\002\000\004\004\016\001\002\000\012\011\012\013"
            + "\015\014\011\015\010\001\002\000\012\011\uffff\013\uffff"
            + "\014\uffff\015\uffff\001\002\000\004\002\001\001\002\000"
            + "\012\011\ufffd\013\ufffd\014\ufffd\015\ufffd\001\002\000\004"
            + "\010\020\001\002\000\004\004\021\001\002\000\004\013"
            + "\022\001\002\000\012\011\ufffc\013\ufffc\014\ufffc\015\ufffc"
            + "\001\002\000\004\010\024\001\002\000\004\004\025\001"
            + "\002\000\004\006\026\001\002\000\004\004\027\001\002"
            + "\000\004\007\030\001\002\000\004\004\031\001\002\000"
            + "\004\013\032\001\002\000\012\011\ufffb\013\ufffb\014\ufffb"
            + "\015\ufffb\001\002\000\004\002\000\001\002" });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\031\000\004\003\003\001\001\000\002\001\001\000"
            + "\002\001\001\000\006\004\006\005\012\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\004\013\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @SuppressWarnings("unchecked")
    @Override
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }

    /**
     * Returns the read in graph from the parser.
     * 
     * @return the read in graph.
     */
    public Graph getGraph() {
        return action_obj.getGraph();
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {

    /**
     * Indicated whether or not the graph is directed.
     */
    private boolean directed = false;

    /**
     * Contains a mapping from id to the corresponding node.
     */
    @SuppressWarnings("unchecked")
    private HashMap nodeMap = new HashMap();

    /**
     * The graph being read in.
     */
    private Graph g = new AdjListGraph();

    /**
     * Returns the read in graph.
     * 
     * @return the read in graph.
     */
    public Graph getGraph() {
        return g;
    }

    @SuppressWarnings("unused")
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    @SuppressWarnings("unchecked")
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack, int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // ITEM ::= EDGE SBRACE ID INTEGER SOURCE INTEGER TARGET INTEGER
                // CBRACE
        {
            Object RESULT = null;
            @SuppressWarnings("unused")
            int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 5)).left;
            @SuppressWarnings("unused")
            int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 5)).right;
            @SuppressWarnings("unused")
            Integer id = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 5)).value;
            @SuppressWarnings("unused")
            int sidleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).left;
            @SuppressWarnings("unused")
            int sidright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).right;
            Integer sid = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).value;
            @SuppressWarnings("unused")
            int tidleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int tidright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer tid = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            Node source = (Node) nodeMap.get(sid);
            Node target = (Node) nodeMap.get(tid);
            Edge e = g.addEdge(source, target, directed);

            // make arrows out of directed edge lines
            if (directed) {
                EdgeGraphicAttribute ega;
                try {
                    ega = (EdgeGraphicAttribute) e.getAttributes()
                            .getAttribute("graphics");
                    ega
                            .setArrowhead("org.graffiti.plugins.views.defaults.StandardArrowShape");
                } catch (AttributeNotFoundException anfe) {
                    ega = new EdgeGraphicAttribute();
                    ega
                            .setArrowhead("org.graffiti.plugins.views.defaults.StandardArrowShape");
                    e.addAttribute(ega, "");
                }
            }

            CUP$parser$result = new java_cup.runtime.Symbol(2/* ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 8)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // ITEM ::= NODE SBRACE ID INTEGER CBRACE
        {
            Object RESULT = null;
            @SuppressWarnings("unused")
            int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer id = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            Node n = g.addNode();
            nodeMap.put(id, n);

            CUP$parser$result = new java_cup.runtime.Symbol(2/* ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 4)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // ITEM ::= DIRECTED INTEGER
        {
            Object RESULT = null;
            @SuppressWarnings("unused")
            int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            @SuppressWarnings("unused")
            int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer d = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            if (d.intValue() == 1) {
                directed = true;
            } else {
                directed = false;
            }
            g.setDirected(directed, false);
            g.setBoolean("directed", directed); // should not be necessary ->
                                                // bug?

            CUP$parser$result = new java_cup.runtime.Symbol(2/* ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // ITEMLIST ::= ITEM
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(3/* ITEMLIST */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // ITEMLIST ::= ITEMLIST ITEM
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(3/* ITEMLIST */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= GML EOF
        {
            Object RESULT = null;
            @SuppressWarnings("unused")
            int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            @SuppressWarnings("unused")
            int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Object start_val = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            RESULT = start_val;
            CUP$parser$result = new java_cup.runtime.Symbol(0/* $START */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // GML ::= GRAPH SBRACE ITEMLIST CBRACE
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(1/* GML */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
