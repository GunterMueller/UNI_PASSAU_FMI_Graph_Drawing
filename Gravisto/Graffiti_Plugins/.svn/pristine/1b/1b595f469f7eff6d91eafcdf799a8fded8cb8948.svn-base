package org.graffiti.plugins.ios.gml.gmlReader.parser;

import java.util.List;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.graffiti.plugins.ios.gml.gmlReader.gml.Gml;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlEdge;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlGraph;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlInt;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlKey;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlList;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlNode;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlReal;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlString;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlValue;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlNodeStyle;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlEdgeStyle;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlParseError;
import org.graffiti.plugins.ios.gml.gmlReader.gml.GmlSyntaxError;

action code {:

    /**
     * The representation of the GML file the parser has read in.
     */
    Gml gml = null;

    /**
     * The node style declared in the GML file.
     */
    GmlNodeStyle nodeStyle = null;

    /**
     * The edge style declared in the GML.
     */
    GmlEdgeStyle edgeStyle = null;

    /**
     * The list of errors the parser detects.
     */
    List errors = new ArrayList();

    /**
     * The logger of the parser.
     */
    private static final Logger logger =
	Logger.getLogger(parser.class.getName());
	
    static {
        logger.setLevel(GlobalLoggerSetting.LOGGER_LEVEL);
    }

:}

parser code {:

    /**
     * The logger of the parser.
     */
    private static final Logger logger =
	Logger.getLogger(parser.class.getName());
	
	static
    {
        logger.setLevel(Level.OFF);
    }

    public void syntax_error(java_cup.runtime.Symbol current) {
	// System.err.print("parse error near " + current.value + ". ");
	logger.severe("parser error near " + current.value 
	    + "(line " + current.left + ").");
	GmlSyntaxError se = new GmlSyntaxError(current.left, current);
	addError(se);
    }
    
    public void report_error(String message, java_cup.runtime.Symbol info) {
	logger.severe("parse error between character " + info.left 
	    + " and " + info.right + ": " 
	    + info.value + " (" + message + ").");
    }

    /**
     * Returns the read in graph.
     *
     * @return the read in graph.
     */
    public Gml getGraph() {
        return action_obj.gml;
    }

    /**
     * Returns the read in node style.
     *
     * @return the read in node style.
     */
    public GmlNodeStyle getNodeStyle() {
        return action_obj.nodeStyle;
    }

    /**
     * Returns the read in edge style.
     *
     * @return the read in edge style.
     */
    public GmlEdgeStyle getEdgeStyle() {
        return action_obj.edgeStyle;
    }

    void addError(GmlParseError pe) {
	assert pe != null;
        action_obj.errors.add(pe);
    }

:};

/* terminals returned by the scanner */

/* keys */
terminal String KEY;

/* graphs, nodes and edges */
terminal GmlGraph GRAPH;
terminal GmlNode NODE;
terminal GmlEdge EDGE;

/* style declarations */
terminal GmlNodeStyle NODESTYLE;
terminal GmlEdgeStyle EDGESTYLE;

/* values */
terminal String STRING;
terminal Integer INTEGER;
terminal Double REAL;

/* braces */
terminal LBRACE, RBRACE;

/* Non terminals */
non terminal Gml gml;
non terminal GmlList list;
non terminal GmlValue value;

/* The grammar rules ... */

gml              ::= list:l
			{: logger.info("gml detected.");
			   if (l == null) logger.warning("empty list");
			   gml = new Gml(lleft, nodeStyle,
			       edgeStyle, l, errors); :}
		 ;

list		 ::= GRAPH:gr value:v list:l
			{: logger.info("graph detected at line " + grleft + "."); 
			   GmlGraph g = new GmlGraph(grleft, v);
			   RESULT = new GmlList(grleft, g, l); :}
		 |   NODESTYLE:ns value:v list:l
			{: logger.info("node style detected at line " 
			       + nsleft + ".");
			   nodeStyle = new GmlNodeStyle(nsleft, v);
			   RESULT = l; :}
		 |   EDGESTYLE:es value:v list:l
			{: logger.info("edge style detected at line " 
			       + esleft + ".");
			   edgeStyle = new GmlEdgeStyle(esleft, v);
			   RESULT = l; :}
		 |   NODE:no value:v list:l
			{: logger.info("node detected at line " 
			       + noleft + "."); 
			   GmlNode n = new GmlNode(noleft, v);
			   RESULT = new GmlList(noleft, n, l); :}
		 |   EDGE:ed value:v list:l
			{: logger.info("edge detected at line " 
			       + edleft + ".");
			   GmlEdge e = new GmlEdge(edleft, v);
			   RESULT = new GmlList(edleft, e, l); :}
		 |   KEY:k value:v list:l
			{: logger.info("key " + k + " detected at line "
			       + kleft + ".");
			   GmlKey gk = new GmlKey(kleft, k, v);
			   RESULT = new GmlList(kleft, gk, l); :}
		 |   /* empty list or end of list */
			{: logger.info("end of list.");
			   RESULT = null; :}
   		 ;

value		 ::= INTEGER:i
			{: logger.info("reading integer: " + i 
			       + " at line " + ileft + "."); 
			   RESULT = new GmlInt(ileft, i); :}
		 |   REAL:r
			{: logger.info("reading real number: " + r 
			       + " at line " + rleft + ".");
			   RESULT = new GmlReal(rleft, r); :}
		 |   STRING:s
			{: logger.info("reading string: \"" + s 
			       + "\" at line " + sleft + ".");
			   RESULT = new GmlString(sleft, s); :}
		 |   LBRACE list:l RBRACE
			{: logger.info("reading list.");
			   RESULT = l; :}
		 |   LBRACE list:l error:e
			{: logger.severe("matching \"]\" "
			       + "missing (line " + eleft + ").");
			   GmlParseError pe 
			       = new GmlParseError(eleft, 
			       "Matching \"]\" missing.");
			   errors.add(pe);
			   RESULT = l; :}
		 ;
