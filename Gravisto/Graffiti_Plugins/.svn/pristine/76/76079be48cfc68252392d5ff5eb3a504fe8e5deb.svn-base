// =============================================================================
//
//   ConnectSpecial.java
//
//   Copyright (c) 2001-2006 Gravisto Team, University of Passau
//
// =============================================================================
// $Id$

package org.graffiti.plugins.algorithms.connectspecial;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.graffiti.attributes.Attribute;
import org.graffiti.attributes.AttributeNotFoundException;
import org.graffiti.attributes.CollectionAttribute;
import org.graffiti.attributes.CompositeAttribute;
import org.graffiti.graph.Edge;
import org.graffiti.graph.Graph;
import org.graffiti.graph.Node;
import org.graffiti.graphics.LabelAttribute;
import org.graffiti.graphics.NodeLabelAttribute;
import org.graffiti.plugin.algorithm.AbstractAlgorithm;
import org.graffiti.plugin.algorithm.PreconditionException;
import org.graffiti.plugin.parameter.Parameter;
import org.graffiti.plugin.parameter.SelectionParameter;
import org.graffiti.plugin.parameter.StringParameter;
import org.graffiti.selection.Selection;
import org.graffiti.util.Queue;

/**
 * An implementation of the ConnectSpecial algorithm.
 * 
 * @version $Revision$
 */
public class ConnectSpecial extends AbstractAlgorithm {

    /** The currently registered graph. */
    private Graph g;

    /** DOCUMENT ME! */
    private Node sourceNode = null;

    /** DOCUMENT ME! */
    private Selection selection;

    /** DOCUMENT ME! */
    private Set<Node> result;

    /** DOCUMENT ME! */
    private String attrName = "";

    /** DOCUMENT ME! */
    private String attrValue = "";

    /** DOCUMENT ME! */
    private boolean doNumber = false;

    /** DOCUMENT ME! */
    private boolean doSelect = true;

    /**
     * DOCUMENT ME!
     * 
     * @param doNumber
     *            DOCUMENT ME!
     */
    public void setDoNumber(boolean doNumber) {
        this.doNumber = doNumber;
    }

    /**
     * If onlyResult is true, the graph will not be changed.
     * 
     * @param doSelect
     */
    public void setDoSelect(boolean doSelect) {
        this.doSelect = doSelect;
    }

    /**
     * @see org.graffiti.plugin.algorithm.Algorithm#getName()
     */
    public String getName() {
        return "ConnectSpecial";
    }

    /**
     * @see org.graffiti.plugin.AbstractParametrizable#setAlgorithmParameters(Parameter[])
     */
    @Override
    public void setAlgorithmParameters(Parameter<?>[] params) {
        this.parameters = params;
        selection = ((SelectionParameter) params[0]).getSelection();

        // sourceNode = (Node) selection.getNodes().get(0);
        attrName = ((StringParameter) params[1]).getString();
        attrValue = ((StringParameter) params[2]).getString();
    }

    /**
     * @see org.graffiti.plugin.AbstractParametrizable#getAlgorithmParameters()
     */
    @Override
    public Parameter<?>[] getAlgorithmParameters() {
        SelectionParameter selParam = new SelectionParameter("Start node",
                "ConnectSpecial will start with the only selected node.");

        StringParameter attrName = new StringParameter("label.label",
                "Attribute",
                "The path to an attribute that specifies which edges are allowed.");

        StringParameter attrValue = new StringParameter("1", "Value",
                "The value of the given attribute.");

        return new Parameter[] { selParam, attrName, attrValue };
    }

    /**
     * Returns all visited nodes in a set.
     * 
     * @return Set
     */
    public Set<Node> getResult() {
        return this.result;
    }

    /**
     * @see org.graffiti.plugin.algorithm.Algorithm#attach(Graph)
     */
    @Override
    public void attach(Graph g) {
        this.g = g;
    }

    // /**
    // * Constructs a new ConnectSpecial algorithm instance.
    // */
    // public ConnectSpecial() {
    // // does nothing
    // }

    /**
     * @see org.graffiti.plugin.algorithm.Algorithm#check()
     */
    @Override
    public void check() throws PreconditionException {
        if (g.getNumberOfNodes() <= 0)
            throw new PreconditionException(
                    "The graph is empty. Cannot run ConnectSpecial.");

        if ((selection == null) || (selection.getNodes().size() != 1))
            throw new PreconditionException(
                    "ConnectSpecial needs exactly one selected node.");
    }

    /**
     * The given graph must have at least one node.
     * 
     * @see org.graffiti.plugin.algorithm.Algorithm#execute()
     */
    public void execute() {
        try {
            sourceNode = selection.getNodes().get(0);
        } catch (Exception ex) {
            throw new RuntimeException("Must call method \"check\" before "
                    + " calling \"execute\".");
        }

        Queue q = new Queue();

        // d contains a mapping from node to an integer, the bfsnum
        Map<Node, Integer> d = new HashMap<Node, Integer>();

        q.addLast(sourceNode);
        d.put(sourceNode, new Integer(0));

        while (!q.isEmpty()) {
            Node v = (Node) q.removeFirst();

            for (Iterator<Edge> ie = v.getEdgesIterator(); ie.hasNext();) {
                Edge edge = ie.next();

                // filter all edges that fulfill attribute constraint
                try {
                    if (!edge.getAttribute(attrName).getValue().toString()
                            .equals(attrValue)) {
                        continue;
                    }
                } catch (AttributeNotFoundException anfe) {
                    continue;
                }

                Node neighbour = edge.getSource();

                if (v.equals(neighbour)) {
                    neighbour = edge.getTarget();
                }

                if (!d.containsKey(neighbour)) {
                    Integer bfsNum = new Integer(d.get(v).intValue() + 1);
                    d.put(neighbour, bfsNum);
                    q.addLast(neighbour);
                }
            }
        }

        this.result = d.keySet();

        if (doSelect) {
            Set<Node> result = d.keySet();
            selection.clear();
            selection.addAll(result);

            System.out.println("changed selection to: " + selection.getNodes());
        }

        if (doNumber) {
            g.getListenerManager().transactionStarted(this);

            for (Iterator<Node> nodes = g.getNodesIterator(); nodes.hasNext();) {
                Node n = nodes.next();

                if (d.containsKey(n)) {
                    setLabel(n, d.get(n) + "");
                }
            }

            g.getListenerManager().transactionFinished(this);
        }
    }

    /**
     * @see org.graffiti.plugin.algorithm.Algorithm#reset()
     */
    @Override
    public void reset() {
        g = null;
    }

    /**
     * DOCUMENT ME!
     * 
     * @param n
     *            DOCUMENT ME!
     * @param val
     *            DOCUMENT ME!
     */
    private void setLabel(Node n, String val) {
        LabelAttribute labelAttr = (LabelAttribute) searchForAttribute(n
                .getAttribute(""), LabelAttribute.class);

        if (labelAttr != null) {
            labelAttr.setLabel(val);
        } else { // no label found
            labelAttr = new NodeLabelAttribute("label");
            labelAttr.setLabel(val);
            n.addAttribute(labelAttr, "");
        }
    }

    /**
     * DOCUMENT ME!
     * 
     * @param attr
     *            DOCUMENT ME!
     * @param attributeType
     *            DOCUMENT ME!
     * 
     * @return DOCUMENT ME!
     */
    private Attribute searchForAttribute(Attribute attr,
            Class<? extends Attribute> attributeType) {
        if (attributeType.isInstance(attr))
            return attr;
        else {
            if (attr instanceof CollectionAttribute) {
                Iterator<Attribute> it = ((CollectionAttribute) attr)
                        .getCollection().values().iterator();

                while (it.hasNext()) {
                    Attribute newAttr = searchForAttribute(it.next(),
                            attributeType);

                    if (newAttr != null)
                        return newAttr;
                }
            } else if (attr instanceof CompositeAttribute)
                // TODO: treat those correctly; some of those have not yet
                // been correctly implemented
                return null;
        }

        return null;
    }
}

// -----------------------------------------------------------------------------
// end of file
// -----------------------------------------------------------------------------
