package org.graffiti.plugins.scripting.doc;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Documentation file generated by the {@code DocumentationGenerator}.
 * 
 * @author Andreas Glei&szlig;ner
 * @version $Revision$ $Date$
 * @see DocumentationGenerator
 */
class DocumentationFile {
    private static final String FILE_PREFIX = "../Graffiti_Plugins/";

    private static final Pattern NAME_PATTERN = Pattern.compile("(.*)\\.class");

    private static final Pattern LINE_PATTERN = Pattern
            .compile("([^\\=]*)\\=(.*)");

    private Map<String, String> map;

    private File file;

    public DocumentationFile(String name) {
        Matcher matcher = NAME_PATTERN.matcher(name);
        if (!matcher.matches())
            throw new IllegalArgumentException("Illegal class value pattern.");
        String fileName = FILE_PREFIX + matcher.group(1).replace('.', '/')
                + ".properties";
        file = new File(fileName);
        map = new HashMap<String, String>();
    }

    public void commit() {
        List<String> list = new LinkedList<String>();
        try {
            if (file.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line;
                while ((line = reader.readLine()) != null) {
                    Matcher matcher = LINE_PATTERN.matcher(line);
                    if (matcher.matches()) {
                        String key = matcher.group(1);
                        String value = map.get(key);
                        if (value == null) {
                            list.add(line);
                        } else {
                            list.add(key + "=" + value);
                            map.remove(key);
                        }
                    } else {
                        list.add(line);
                    }
                }
            }

            for (Map.Entry<String, String> entry : map.entrySet()) {
                list.add(entry.getKey() + "=" + entry.getValue());
            }
            BufferedWriter writer = new BufferedWriter(new FileWriter(file,
                    false));
            for (String s : list) {
                writer.write(s);
                writer.newLine();
            }
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String escape(String string) {
        StringBuffer buffer = new StringBuffer();
        int len = string.length();
        for (int i = 0; i < len; i++) {
            char ch = string.charAt(i);
            switch (ch) {
            case '\\':
                buffer.append("\\\\");
                break;
            case '\n':
                buffer.append("\\n");
                break;
            case '\t':
                buffer.append("\\t");
                break;
            default:
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

    public void put(String className, String elementName, String summary,
            String full) {
        String key = elementName != null ? "doc." + className + "."
                + elementName : "doc." + className;
        System.out.println(key + "=" + escape(full));
        map.put(key, escape(summary));
        map.put(key + ".full", escape(full));
    }
}
