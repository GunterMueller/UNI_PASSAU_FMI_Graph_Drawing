//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Mar 30 12:18:40 CEST 2004
//----------------------------------------------------

package org.graffiti.plugins.ios.importers.gml;

import java.awt.Color;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import org.graffiti.attributes.Attribute;
import org.graffiti.attributes.AttributeExistsException;
import org.graffiti.attributes.AttributeNotFoundException;
import org.graffiti.attributes.CollectionAttribute;
import org.graffiti.attributes.DoubleAttribute;
import org.graffiti.attributes.HashMapAttribute;
import org.graffiti.attributes.IntegerAttribute;
import org.graffiti.attributes.SortedCollectionAttribute;
import org.graffiti.attributes.StringAttribute;
import org.graffiti.graph.Edge;
import org.graffiti.graph.Graph;
import org.graffiti.graph.Node;
import org.graffiti.graph.OptAdjListGraph;
import org.graffiti.graphics.ColorAttribute;
import org.graffiti.graphics.CoordinateAttribute;
import org.graffiti.graphics.EdgeGraphicAttribute;
import org.graffiti.graphics.EdgeLabelAttribute;
import org.graffiti.graphics.GraphicAttributeConstants;
import org.graffiti.graphics.ImageAttribute;
import org.graffiti.graphics.LabelAttribute;
import org.graffiti.graphics.NodeGraphicAttribute;
import org.graffiti.graphics.NodeLabelAttribute;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Tue Mar 30 12:18:40 CEST 2004
 */
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\226\000\002\003\005\000\002\002\004\000\002\004"
            + "\004\000\002\004\006\000\002\004\006\000\002\004\004"
            + "\000\002\004\003\000\002\005\005\000\002\005\005\000"
            + "\002\013\004\000\002\013\004\000\002\013\004\000\002"
            + "\013\004\000\002\013\004\000\002\013\004\000\002\013"
            + "\004\000\002\013\004\000\002\013\004\000\002\013\004"
            + "\000\002\013\004\000\002\013\005\000\002\013\005\000"
            + "\002\013\003\000\002\017\004\000\002\017\003\000\002"
            + "\021\005\000\002\021\005\000\002\021\005\000\002\021"
            + "\005\000\002\021\005\000\002\021\005\000\002\021\005"
            + "\000\002\021\005\000\002\021\005\000\002\021\005\000"
            + "\002\021\003\000\002\007\005\000\002\007\011\000\002"
            + "\007\003\000\002\006\005\000\002\006\011\000\002\006"
            + "\003\000\002\010\005\000\002\010\005\000\002\010\005"
            + "\000\002\010\005\000\002\010\005\000\002\010\005\000"
            + "\002\010\005\000\002\010\005\000\002\010\005\000\002"
            + "\010\005\000\002\010\005\000\002\010\003\000\002\011"
            + "\005\000\002\011\005\000\002\011\005\000\002\011\005"
            + "\000\002\011\005\000\002\011\005\000\002\011\005\000"
            + "\002\011\005\000\002\011\005\000\002\011\005\000\002"
            + "\011\003\000\002\015\005\000\002\015\004\000\002\015"
            + "\006\000\002\015\003\000\002\022\005\000\002\022\005"
            + "\000\002\022\005\000\002\022\005\000\002\022\005\000"
            + "\002\022\005\000\002\022\005\000\002\022\005\000\002"
            + "\022\005\000\002\022\005\000\002\022\005\000\002\022"
            + "\005\000\002\022\005\000\002\022\005\000\002\022\005"
            + "\000\002\022\005\000\002\022\005\000\002\022\005\000"
            + "\002\022\005\000\002\022\005\000\002\022\005\000\002"
            + "\022\005\000\002\022\005\000\002\022\005\000\002\022"
            + "\005\000\002\022\005\000\002\022\005\000\002\022\006"
            + "\000\002\022\004\000\002\022\003\000\002\016\005\000"
            + "\002\016\005\000\002\016\005\000\002\016\004\000\002"
            + "\016\006\000\002\016\003\000\002\023\005\000\002\023"
            + "\005\000\002\023\005\000\002\023\005\000\002\023\005"
            + "\000\002\023\005\000\002\023\005\000\002\023\005\000"
            + "\002\023\005\000\002\023\005\000\002\023\005\000\002"
            + "\023\005\000\002\023\005\000\002\023\005\000\002\023"
            + "\005\000\002\023\005\000\002\023\005\000\002\023\005"
            + "\000\002\023\005\000\002\023\005\000\002\023\005\000"
            + "\002\023\005\000\002\023\005\000\002\023\005\000\002"
            + "\023\005\000\002\023\005\000\002\023\005\000\002\023"
            + "\005\000\002\023\005\000\002\023\006\000\002\023\004"
            + "\000\002\023\003\000\002\014\004\000\002\014\004\000"
            + "\002\014\004\000\002\014\005\000\002\014\004\000\002"
            + "\020\004\000\002\020\003\000\002\024\006\000\002\024"
            + "\003\000\002\025\005\000\002\025\005\000\002\025\005"
            + "\000\002\025\003" });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\u0195\000\004\004\005\001\002\000\004\002\u0197\001"
            + "\002\000\004\010\006\001\002\000\036\007\007\011\022"
            + "\012\024\013\014\014\030\015\016\016\013\017\012\020"
            + "\026\021\023\022\021\023\017\024\027\065\015\001\002"
            + "\000\012\010\u0192\025\u018f\026\u0190\027\u0191\001\002\000"
            + "\004\002\001\001\002\000\036\007\uffeb\011\uffeb\012\uffeb"
            + "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021"
            + "\uffeb\022\uffeb\023\uffeb\024\uffeb\065\uffeb\001\002\000\004"
            + "\026\u018e\001\002\000\004\025\u018d\001\002\000\004\010"
            + "\u0160\001\002\000\004\010\u013f\001\002\000\004\010\317"
            + "\001\002\000\004\026\316\001\002\000\036\007\007\011"
            + "\022\012\024\013\014\014\030\015\016\016\013\017\012"
            + "\020\026\021\023\022\021\023\017\024\027\065\015\001"
            + "\002\000\004\025\314\001\002\000\004\002\ufffb\001\002"
            + "\000\006\025\312\026\313\001\002\000\004\010\232\001"
            + "\002\000\036\007\007\011\022\012\024\013\014\014\030"
            + "\015\016\016\013\017\012\020\026\021\023\022\021\023"
            + "\017\024\027\065\015\001\002\000\004\026\230\001\002"
            + "\000\004\026\227\001\002\000\004\010\031\001\002\000"
            + "\014\007\033\011\036\016\032\020\034\065\037\001\002"
            + "\000\004\025\225\001\002\000\012\010\220\025\215\026"
            + "\216\027\217\001\002\000\004\026\214\001\002\000\036"
            + "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016"
            + "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa"
            + "\065\ufffa\001\002\000\036\007\uffbd\011\uffbd\012\uffbd\013"
            + "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd"
            + "\022\uffbd\023\uffbd\024\uffbd\065\uffbd\001\002\000\004\010"
            + "\042\001\002\000\014\007\033\011\036\016\032\020\034"
            + "\065\037\001\002\000\036\007\uffbf\011\uffbf\012\uffbf\013"
            + "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf"
            + "\022\uffbf\023\uffbf\024\uffbf\065\uffbf\001\002\000\100\007"
            + "\033\011\074\020\034\030\053\031\052\032\051\033\054"
            + "\034\071\035\073\036\056\037\060\040\101\041\066\042"
            + "\046\043\065\044\070\045\076\046\050\047\075\050\063"
            + "\051\100\052\047\053\064\054\045\057\043\060\062\061"
            + "\077\062\057\063\055\064\072\066\067\001\002\000\004"
            + "\026\212\001\002\000\100\007\033\011\074\020\034\030"
            + "\053\031\052\032\051\033\054\034\071\035\073\036\056"
            + "\037\060\040\101\041\066\042\046\043\065\044\070\045"
            + "\076\046\050\047\075\050\063\051\100\052\047\053\064"
            + "\054\045\057\043\060\062\061\077\062\057\063\055\064"
            + "\072\066\067\001\002\000\004\026\207\001\002\000\004"
            + "\026\205\001\002\000\004\026\203\001\002\000\004\027"
            + "\201\001\002\000\004\027\177\001\002\000\004\027\175"
            + "\001\002\000\004\027\173\001\002\000\004\027\171\001"
            + "\002\000\004\026\167\001\002\000\004\026\165\001\002"
            + "\000\004\025\163\001\002\000\004\026\161\001\002\000"
            + "\014\007\033\011\036\016\032\020\034\065\037\001\002"
            + "\000\004\026\156\001\002\000\004\026\154\001\002\000"
            + "\004\026\152\001\002\000\004\026\150\001\002\000\004"
            + "\026\146\001\002\000\004\010\124\001\002\000\004\027"
            + "\122\001\002\000\004\027\120\001\002\000\004\026\116"
            + "\001\002\000\004\027\114\001\002\000\014\007\uff9f\011"
            + "\uff9f\016\uff9f\020\uff9f\065\uff9f\001\002\000\004\026\112"
            + "\001\002\000\004\027\110\001\002\000\004\025\106\001"
            + "\002\000\004\026\104\001\002\000\004\026\102\001\002"
            + "\000\100\007\033\011\074\020\034\030\053\031\052\032"
            + "\051\033\054\034\071\035\073\036\056\037\060\040\101"
            + "\041\066\042\046\043\065\044\070\045\076\046\050\047"
            + "\075\050\063\051\100\052\047\053\064\054\045\057\043"
            + "\060\062\061\077\062\057\063\055\064\072\066\067\001"
            + "\002\000\014\007\uffb4\011\uffb4\016\uffb4\020\uffb4\065\uffb4"
            + "\001\002\000\100\007\033\011\074\020\034\030\053\031"
            + "\052\032\051\033\054\034\071\035\073\036\056\037\060"
            + "\040\101\041\066\042\046\043\065\044\070\045\076\046"
            + "\050\047\075\050\063\051\100\052\047\053\064\054\045"
            + "\057\043\060\062\061\077\062\057\063\055\064\072\066"
            + "\067\001\002\000\014\007\uffab\011\uffab\016\uffab\020\uffab"
            + "\065\uffab\001\002\000\100\007\033\011\074\020\034\030"
            + "\053\031\052\032\051\033\054\034\071\035\073\036\056"
            + "\037\060\040\101\041\066\042\046\043\065\044\070\045"
            + "\076\046\050\047\075\050\063\051\100\052\047\053\064"
            + "\054\045\057\043\060\062\061\077\062\057\063\055\064"
            + "\072\066\067\001\002\000\014\007\uffa5\011\uffa5\016\uffa5"
            + "\020\uffa5\065\uffa5\001\002\000\100\007\033\011\074\020"
            + "\034\030\053\031\052\032\051\033\054\034\071\035\073"
            + "\036\056\037\060\040\101\041\066\042\046\043\065\044"
            + "\070\045\076\046\050\047\075\050\063\051\100\052\047"
            + "\053\064\054\045\057\043\060\062\061\077\062\057\063"
            + "\055\064\072\066\067\001\002\000\014\007\uffaf\011\uffaf"
            + "\016\uffaf\020\uffaf\065\uffaf\001\002\000\100\007\033\011"
            + "\074\020\034\030\053\031\052\032\051\033\054\034\071"
            + "\035\073\036\056\037\060\040\101\041\066\042\046\043"
            + "\065\044\070\045\076\046\050\047\075\050\063\051\100"
            + "\052\047\053\064\054\045\057\043\060\062\061\077\062"
            + "\057\063\055\064\072\066\067\001\002\000\014\007\uffad"
            + "\011\uffad\016\uffad\020\uffad\065\uffad\001\002\000\100\007"
            + "\033\011\074\020\034\030\053\031\052\032\051\033\054"
            + "\034\071\035\073\036\056\037\060\040\101\041\066\042"
            + "\046\043\065\044\070\045\076\046\050\047\075\050\063"
            + "\051\100\052\047\053\064\054\045\057\043\060\062\061"
            + "\077\062\057\063\055\064\072\066\067\001\002\000\014"
            + "\007\uffb7\011\uffb7\016\uffb7\020\uffb7\065\uffb7\001\002\000"
            + "\100\007\033\011\074\020\034\030\053\031\052\032\051"
            + "\033\054\034\071\035\073\036\056\037\060\040\101\041"
            + "\066\042\046\043\065\044\070\045\076\046\050\047\075"
            + "\050\063\051\100\052\047\053\064\054\045\057\043\060"
            + "\062\061\077\062\057\063\055\064\072\066\067\001\002"
            + "\000\014\007\uffa2\011\uffa2\016\uffa2\020\uffa2\065\uffa2\001"
            + "\002\000\100\007\033\011\074\020\034\030\053\031\052"
            + "\032\051\033\054\034\071\035\073\036\056\037\060\040"
            + "\101\041\066\042\046\043\065\044\070\045\076\046\050"
            + "\047\075\050\063\051\100\052\047\053\064\054\045\057"
            + "\043\060\062\061\077\062\057\063\055\064\072\066\067"
            + "\001\002\000\014\007\uffb8\011\uffb8\016\uffb8\020\uffb8\065"
            + "\uffb8\001\002\000\100\007\033\011\074\020\034\030\053"
            + "\031\052\032\051\033\054\034\071\035\073\036\056\037"
            + "\060\040\101\041\066\042\046\043\065\044\070\045\076"
            + "\046\050\047\075\050\063\051\100\052\047\053\064\054"
            + "\045\057\043\060\062\061\077\062\057\063\055\064\072"
            + "\066\067\001\002\000\014\007\uffb0\011\uffb0\016\uffb0\020"
            + "\uffb0\065\uffb0\001\002\000\006\011\125\067\127\001\002"
            + "\000\104\007\uff70\011\uff70\020\uff70\030\uff70\031\uff70\032"
            + "\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70"
            + "\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047"
            + "\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70"
            + "\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064"
            + "\uff70\066\uff70\001\002\000\100\007\033\011\074\020\034"
            + "\030\053\031\052\032\051\033\054\034\071\035\073\036"
            + "\056\037\060\040\101\041\066\042\046\043\065\044\070"
            + "\045\076\046\050\047\075\050\063\051\100\052\047\053"
            + "\064\054\045\057\043\060\062\061\077\062\057\063\055"
            + "\064\072\066\067\001\002\000\004\010\130\001\002\000"
            + "\012\011\134\070\133\071\132\072\131\001\002\000\004"
            + "\027\143\001\002\000\004\027\141\001\002\000\004\027"
            + "\137\001\002\000\006\011\uff6c\067\uff6c\001\002\000\006"
            + "\011\125\067\127\001\002\000\104\007\uff71\011\uff71\020"
            + "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71"
            + "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044"
            + "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71"
            + "\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061"
            + "\uff71\062\uff71\063\uff71\064\uff71\066\uff71\001\002\000\012"
            + "\011\134\070\133\071\132\072\131\001\002\000\006\011"
            + "\uff6f\067\uff6f\001\002\000\012\011\134\070\133\071\132"
            + "\072\131\001\002\000\006\011\uff6e\067\uff6e\001\002\000"
            + "\012\011\134\070\133\071\132\072\131\001\002\000\006"
            + "\011\uff6d\067\uff6d\001\002\000\014\007\uffa1\011\uffa1\016"
            + "\uffa1\020\uffa1\065\uffa1\001\002\000\100\007\033\011\074"
            + "\020\034\030\053\031\052\032\051\033\054\034\071\035"
            + "\073\036\056\037\060\040\101\041\066\042\046\043\065"
            + "\044\070\045\076\046\050\047\075\050\063\051\100\052"
            + "\047\053\064\054\045\057\043\060\062\061\077\062\057"
            + "\063\055\064\072\066\067\001\002\000\014\007\uffb3\011"
            + "\uffb3\016\uffb3\020\uffb3\065\uffb3\001\002\000\100\007\033"
            + "\011\074\020\034\030\053\031\052\032\051\033\054\034"
            + "\071\035\073\036\056\037\060\040\101\041\066\042\046"
            + "\043\065\044\070\045\076\046\050\047\075\050\063\051"
            + "\100\052\047\053\064\054\045\057\043\060\062\061\077"
            + "\062\057\063\055\064\072\066\067\001\002\000\014\007"
            + "\uffb1\011\uffb1\016\uffb1\020\uffb1\065\uffb1\001\002\000\100"
            + "\007\033\011\074\020\034\030\053\031\052\032\051\033"
            + "\054\034\071\035\073\036\056\037\060\040\101\041\066"
            + "\042\046\043\065\044\070\045\076\046\050\047\075\050"
            + "\063\051\100\052\047\053\064\054\045\057\043\060\062"
            + "\061\077\062\057\063\055\064\072\066\067\001\002\000"
            + "\014\007\uffa9\011\uffa9\016\uffa9\020\uffa9\065\uffa9\001\002"
            + "\000\100\007\033\011\074\020\034\030\053\031\052\032"
            + "\051\033\054\034\071\035\073\036\056\037\060\040\101"
            + "\041\066\042\046\043\065\044\070\045\076\046\050\047"
            + "\075\050\063\051\100\052\047\053\064\054\045\057\043"
            + "\060\062\061\077\062\057\063\055\064\072\066\067\001"
            + "\002\000\014\007\uffac\011\uffac\016\uffac\020\uffac\065\uffac"
            + "\001\002\000\100\007\033\011\074\020\034\030\053\031"
            + "\052\032\051\033\054\034\071\035\073\036\056\037\060"
            + "\040\101\041\066\042\046\043\065\044\070\045\076\046"
            + "\050\047\075\050\063\051\100\052\047\053\064\054\045"
            + "\057\043\060\062\061\077\062\057\063\055\064\072\066"
            + "\067\001\002\000\014\007\uffa6\011\uffa6\016\uffa6\020\uffa6"
            + "\065\uffa6\001\002\000\036\007\uffbe\011\uffbe\012\uffbe\013"
            + "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe"
            + "\022\uffbe\023\uffbe\024\uffbe\065\uffbe\001\002\000\100\007"
            + "\033\011\074\020\034\030\053\031\052\032\051\033\054"
            + "\034\071\035\073\036\056\037\060\040\101\041\066\042"
            + "\046\043\065\044\070\045\076\046\050\047\075\050\063"
            + "\051\100\052\047\053\064\054\045\057\043\060\062\061"
            + "\077\062\057\063\055\064\072\066\067\001\002\000\014"
            + "\007\uffb5\011\uffb5\016\uffb5\020\uffb5\065\uffb5\001\002\000"
            + "\100\007\033\011\074\020\034\030\053\031\052\032\051"
            + "\033\054\034\071\035\073\036\056\037\060\040\101\041"
            + "\066\042\046\043\065\044\070\045\076\046\050\047\075"
            + "\050\063\051\100\052\047\053\064\054\045\057\043\060"
            + "\062\061\077\062\057\063\055\064\072\066\067\001\002"
            + "\000\014\007\uffa4\011\uffa4\016\uffa4\020\uffa4\065\uffa4\001"
            + "\002\000\100\007\033\011\074\020\034\030\053\031\052"
            + "\032\051\033\054\034\071\035\073\036\056\037\060\040"
            + "\101\041\066\042\046\043\065\044\070\045\076\046\050"
            + "\047\075\050\063\051\100\052\047\053\064\054\045\057"
            + "\043\060\062\061\077\062\057\063\055\064\072\066\067"
            + "\001\002\000\014\007\uffb6\011\uffb6\016\uffb6\020\uffb6\065"
            + "\uffb6\001\002\000\100\007\033\011\074\020\034\030\053"
            + "\031\052\032\051\033\054\034\071\035\073\036\056\037"
            + "\060\040\101\041\066\042\046\043\065\044\070\045\076"
            + "\046\050\047\075\050\063\051\100\052\047\053\064\054"
            + "\045\057\043\060\062\061\077\062\057\063\055\064\072"
            + "\066\067\001\002\000\014\007\uffa3\011\uffa3\016\uffa3\020"
            + "\uffa3\065\uffa3\001\002\000\100\007\033\011\074\020\034"
            + "\030\053\031\052\032\051\033\054\034\071\035\073\036"
            + "\056\037\060\040\101\041\066\042\046\043\065\044\070"
            + "\045\076\046\050\047\075\050\063\051\100\052\047\053"
            + "\064\054\045\057\043\060\062\061\077\062\057\063\055"
            + "\064\072\066\067\001\002\000\014\007\uffb9\011\uffb9\016"
            + "\uffb9\020\uffb9\065\uffb9\001\002\000\100\007\033\011\074"
            + "\020\034\030\053\031\052\032\051\033\054\034\071\035"
            + "\073\036\056\037\060\040\101\041\066\042\046\043\065"
            + "\044\070\045\076\046\050\047\075\050\063\051\100\052"
            + "\047\053\064\054\045\057\043\060\062\061\077\062\057"
            + "\063\055\064\072\066\067\001\002\000\014\007\uffbc\011"
            + "\uffbc\016\uffbc\020\uffbc\065\uffbc\001\002\000\100\007\033"
            + "\011\074\020\034\030\053\031\052\032\051\033\054\034"
            + "\071\035\073\036\056\037\060\040\101\041\066\042\046"
            + "\043\065\044\070\045\076\046\050\047\075\050\063\051"
            + "\100\052\047\053\064\054\045\057\043\060\062\061\077"
            + "\062\057\063\055\064\072\066\067\001\002\000\014\007"
            + "\uffbb\011\uffbb\016\uffbb\020\uffbb\065\uffbb\001\002\000\100"
            + "\007\033\011\074\020\034\030\053\031\052\032\051\033"
            + "\054\034\071\035\073\036\056\037\060\040\101\041\066"
            + "\042\046\043\065\044\070\045\076\046\050\047\075\050"
            + "\063\051\100\052\047\053\064\054\045\057\043\060\062"
            + "\061\077\062\057\063\055\064\072\066\067\001\002\000"
            + "\014\007\uffba\011\uffba\016\uffba\020\uffba\065\uffba\001\002"
            + "\000\100\007\033\011\074\020\034\030\053\031\052\032"
            + "\051\033\054\034\071\035\073\036\056\037\060\040\101"
            + "\041\066\042\046\043\065\044\070\045\076\046\050\047"
            + "\075\050\063\051\100\052\047\053\064\054\045\057\043"
            + "\060\062\061\077\062\057\063\055\064\072\066\067\001"
            + "\002\000\014\007\uffae\011\uffae\016\uffae\020\uffae\065\uffae"
            + "\001\002\000\100\007\033\011\074\020\034\030\053\031"
            + "\052\032\051\033\054\034\071\035\073\036\056\037\060"
            + "\040\101\041\066\042\046\043\065\044\070\045\076\046"
            + "\050\047\075\050\063\051\100\052\047\053\064\054\045"
            + "\057\043\060\062\061\077\062\057\063\055\064\072\066"
            + "\067\001\002\000\014\007\uffaa\011\uffaa\016\uffaa\020\uffaa"
            + "\065\uffaa\001\002\000\100\007\033\011\074\020\034\030"
            + "\053\031\052\032\051\033\054\034\071\035\073\036\056"
            + "\037\060\040\101\041\066\042\046\043\065\044\070\045"
            + "\076\046\050\047\075\050\063\051\100\052\047\053\064"
            + "\054\045\057\043\060\062\061\077\062\057\063\055\064"
            + "\072\066\067\001\002\000\014\007\uffb2\011\uffb2\016\uffb2"
            + "\020\uffb2\065\uffb2\001\002\000\100\007\033\011\074\020"
            + "\034\030\053\031\052\032\051\033\054\034\071\035\073"
            + "\036\056\037\060\040\101\041\066\042\046\043\065\044"
            + "\070\045\076\046\050\047\075\050\063\051\100\052\047"
            + "\053\064\054\045\057\043\060\062\061\077\062\057\063"
            + "\055\064\072\066\067\001\002\000\014\007\uffa8\011\uffa8"
            + "\016\uffa8\020\uffa8\065\uffa8\001\002\000\014\007\uffa0\011"
            + "\uffa0\016\uffa0\020\uffa0\065\uffa0\001\002\000\100\007\033"
            + "\011\074\020\034\030\053\031\052\032\051\033\054\034"
            + "\071\035\073\036\056\037\060\040\101\041\066\042\046"
            + "\043\065\044\070\045\076\046\050\047\075\050\063\051"
            + "\100\052\047\053\064\054\045\057\043\060\062\061\077"
            + "\062\057\063\055\064\072\066\067\001\002\000\014\007"
            + "\uffa7\011\uffa7\016\uffa7\020\uffa7\065\uffa7\001\002\000\114"
            + "\005\uff74\006\uff74\007\uff74\011\uff74\016\uff74\020\uff74\030"
            + "\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74"
            + "\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045"
            + "\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74"
            + "\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062"
            + "\uff74\063\uff74\064\uff74\065\uff74\066\uff74\001\002\000\114"
            + "\005\uff78\006\uff78\007\uff78\011\uff78\016\uff78\020\uff78\030"
            + "\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78"
            + "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045"
            + "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78"
            + "\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062"
            + "\uff78\063\uff78\064\uff78\065\uff78\066\uff78\001\002\000\114"
            + "\005\uff76\006\uff76\007\uff76\011\uff76\016\uff76\020\uff76\030"
            + "\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76"
            + "\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045"
            + "\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76"
            + "\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062"
            + "\uff76\063\uff76\064\uff76\065\uff76\066\uff76\001\002\000\114"
            + "\005\uff77\006\uff77\007\uff77\011\uff77\016\uff77\020\uff77\030"
            + "\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77"
            + "\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045"
            + "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77"
            + "\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062"
            + "\uff77\063\uff77\064\uff77\065\uff77\066\uff77\001\002\000\010"
            + "\007\033\011\222\020\034\001\002\000\114\005\uff75\006"
            + "\uff75\007\uff75\011\uff75\016\uff75\020\uff75\030\uff75\031\uff75"
            + "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040"
            + "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75"
            + "\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055"
            + "\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063\uff75"
            + "\064\uff75\065\uff75\066\uff75\001\002\000\114\005\uff72\006"
            + "\uff72\007\uff72\011\uff72\016\uff72\020\uff72\030\uff72\031\uff72"
            + "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040"
            + "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72"
            + "\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055"
            + "\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72"
            + "\064\uff72\065\uff72\066\uff72\001\002\000\010\007\033\011"
            + "\222\020\034\001\002\000\114\005\uff73\006\uff73\007\uff73"
            + "\011\uff73\016\uff73\020\uff73\030\uff73\031\uff73\032\uff73\033"
            + "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73"
            + "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050"
            + "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73"
            + "\057\uff73\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065"
            + "\uff73\066\uff73\001\002\000\014\007\033\011\036\016\032"
            + "\020\034\065\037\001\002\000\036\007\uffc0\011\uffc0\012"
            + "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0"
            + "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\065\uffc0\001\002\000"
            + "\036\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1"
            + "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024"
            + "\ufff1\065\ufff1\001\002\000\036\007\ufff6\011\ufff6\012\ufff6"
            + "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021"
            + "\ufff6\022\ufff6\023\ufff6\024\ufff6\065\ufff6\001\002\000\004"
            + "\002\uffff\001\002\000\010\007\233\011\236\047\234\001"
            + "\002\000\004\026\310\001\002\000\004\010\240\001\002"
            + "\000\036\007\007\011\022\012\024\013\014\014\030\015"
            + "\016\016\013\017\012\020\026\021\023\022\021\023\017"
            + "\024\027\065\015\001\002\000\036\007\uffdb\011\uffdb\012"
            + "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb"
            + "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\065\uffdb\001\002\000"
            + "\004\002\ufffe\001\002\000\004\065\241\001\002\000\004"
            + "\010\242\001\002\000\032\011\243\030\254\031\252\032"
            + "\251\033\255\034\246\035\250\036\256\050\257\051\247"
            + "\052\245\053\244\001\002\000\004\011\uffcc\001\002\000"
            + "\004\026\306\001\002\000\004\026\304\001\002\000\004"
            + "\027\302\001\002\000\004\026\300\001\002\000\004\027"
            + "\276\001\002\000\004\027\274\001\002\000\004\027\272"
            + "\001\002\000\004\011\270\001\002\000\004\027\266\001"
            + "\002\000\004\027\264\001\002\000\004\026\262\001\002"
            + "\000\004\026\260\001\002\000\032\011\243\030\254\031"
            + "\252\032\251\033\255\034\246\035\250\036\256\050\257"
            + "\051\247\052\245\053\244\001\002\000\004\011\uffd1\001"
            + "\002\000\032\011\243\030\254\031\252\032\251\033\255"
            + "\034\246\035\250\036\256\050\257\051\247\052\245\053"
            + "\244\001\002\000\004\011\uffcd\001\002\000\032\011\243"
            + "\030\254\031\252\032\251\033\255\034\246\035\250\036"
            + "\256\050\257\051\247\052\245\053\244\001\002\000\004"
            + "\011\uffd4\001\002\000\032\011\243\030\254\031\252\032"
            + "\251\033\255\034\246\035\250\036\256\050\257\051\247"
            + "\052\245\053\244\001\002\000\004\011\uffd7\001\002\000"
            + "\010\007\233\011\236\047\234\001\002\000\036\007\uffdc"
            + "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017"
            + "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\065\uffdc"
            + "\001\002\000\032\011\243\030\254\031\252\032\251\033"
            + "\255\034\246\035\250\036\256\050\257\051\247\052\245"
            + "\053\244\001\002\000\004\011\uffd6\001\002\000\032\011"
            + "\243\030\254\031\252\032\251\033\255\034\246\035\250"
            + "\036\256\050\257\051\247\052\245\053\244\001\002\000"
            + "\004\011\uffd5\001\002\000\032\011\243\030\254\031\252"
            + "\032\251\033\255\034\246\035\250\036\256\050\257\051"
            + "\247\052\245\053\244\001\002\000\004\011\uffd2\001\002"
            + "\000\032\011\243\030\254\031\252\032\251\033\255\034"
            + "\246\035\250\036\256\050\257\051\247\052\245\053\244"
            + "\001\002\000\004\011\uffd0\001\002\000\032\011\243\030"
            + "\254\031\252\032\251\033\255\034\246\035\250\036\256"
            + "\050\257\051\247\052\245\053\244\001\002\000\004\011"
            + "\uffd3\001\002\000\032\011\243\030\254\031\252\032\251"
            + "\033\255\034\246\035\250\036\256\050\257\051\247\052"
            + "\245\053\244\001\002\000\004\011\uffcf\001\002\000\032"
            + "\011\243\030\254\031\252\032\251\033\255\034\246\035"
            + "\250\036\256\050\257\051\247\052\245\053\244\001\002"
            + "\000\004\011\uffce\001\002\000\010\007\233\011\236\047"
            + "\234\001\002\000\036\007\uffdd\011\uffdd\012\uffdd\013\uffdd"
            + "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022"
            + "\uffdd\023\uffdd\024\uffdd\065\uffdd\001\002\000\036\007\ufff5"
            + "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017"
            + "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\065\ufff5"
            + "\001\002\000\036\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014"
            + "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4"
            + "\023\ufff4\024\ufff4\065\ufff4\001\002\000\036\007\ufff3\011"
            + "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3"
            + "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\065\ufff3\001"
            + "\002\000\004\002\ufffc\001\002\000\036\007\ufff2\011\ufff2"
            + "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020"
            + "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\065\ufff2\001\002"
            + "\000\020\005\326\006\322\007\033\011\320\016\323\020"
            + "\034\065\325\001\002\000\036\007\uff99\011\uff99\012\uff99"
            + "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021"
            + "\uff99\022\uff99\023\uff99\024\uff99\065\uff99\001\002\000\036"
            + "\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016"
            + "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9"
            + "\065\ufff9\001\002\000\004\025\u013d\001\002\000\004\025"
            + "\u013b\001\002\000\020\005\326\006\322\007\033\011\320"
            + "\016\323\020\034\065\325\001\002\000\004\010\331\001"
            + "\002\000\004\025\327\001\002\000\020\005\326\006\322"
            + "\007\033\011\320\016\323\020\034\065\325\001\002\000"
            + "\036\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d"
            + "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024"
            + "\uff9d\065\uff9d\001\002\000\104\007\033\011\365\020\034"
            + "\030\343\031\341\032\340\033\344\034\362\035\363\036"
            + "\347\037\352\040\372\041\357\042\335\043\356\044\361"
            + "\045\367\046\337\047\366\050\354\051\370\052\336\053"
            + "\355\054\334\055\342\056\351\057\332\060\353\061\371"
            + "\062\346\063\350\064\364\066\360\001\002\000\004\026"
            + "\u0138\001\002\000\104\007\033\011\365\020\034\030\343"
            + "\031\341\032\340\033\344\034\362\035\363\036\347\037"
            + "\352\040\372\041\357\042\335\043\356\044\361\045\367"
            + "\046\337\047\366\050\354\051\370\052\336\053\355\054"
            + "\334\055\342\056\351\057\332\060\353\061\371\062\346"
            + "\063\350\064\364\066\360\001\002\000\004\026\u0135\001"
            + "\002\000\004\026\u0133\001\002\000\004\026\u0131\001\002"
            + "\000\004\027\u012f\001\002\000\004\027\u012d\001\002\000"
            + "\004\027\u012b\001\002\000\004\026\u0129\001\002\000\004"
            + "\027\u0127\001\002\000\004\027\u0125\001\002\000\020\005"
            + "\326\006\322\007\033\011\320\016\323\020\034\065\325"
            + "\001\002\000\004\025\u0122\001\002\000\004\026\u0120\001"
            + "\002\000\004\026\u011e\001\002\000\004\026\u011c\001\002"
            + "\000\004\026\u011a\001\002\000\004\026\u0118\001\002\000"
            + "\004\026\u0116\001\002\000\004\026\u0114\001\002\000\004"
            + "\026\u0112\001\002\000\004\026\u0110\001\002\000\004\010"
            + "\u010d\001\002\000\004\027\u010b\001\002\000\004\027\u0109"
            + "\001\002\000\004\027\u0107\001\002\000\004\026\u0105\001"
            + "\002\000\020\005\uff79\006\uff79\007\uff79\011\uff79\016\uff79"
            + "\020\uff79\065\uff79\001\002\000\004\026\u0103\001\002\000"
            + "\004\027\u0101\001\002\000\004\026\377\001\002\000\004"
            + "\025\375\001\002\000\004\026\373\001\002\000\104\007"
            + "\033\011\365\020\034\030\343\031\341\032\340\033\344"
            + "\034\362\035\363\036\347\037\352\040\372\041\357\042"
            + "\335\043\356\044\361\045\367\046\337\047\366\050\354"
            + "\051\370\052\336\053\355\054\334\055\342\056\351\057"
            + "\332\060\353\061\371\062\346\063\350\064\364\066\360"
            + "\001\002\000\020\005\uff90\006\uff90\007\uff90\011\uff90\016"
            + "\uff90\020\uff90\065\uff90\001\002\000\104\007\033\011\365"
            + "\020\034\030\343\031\341\032\340\033\344\034\362\035"
            + "\363\036\347\037\352\040\372\041\357\042\335\043\356"
            + "\044\361\045\367\046\337\047\366\050\354\051\370\052"
            + "\336\053\355\054\334\055\342\056\351\057\332\060\353"
            + "\061\371\062\346\063\350\064\364\066\360\001\002\000"
            + "\020\005\uff7f\006\uff7f\007\uff7f\011\uff7f\016\uff7f\020\uff7f"
            + "\065\uff7f\001\002\000\104\007\033\011\365\020\034\030"
            + "\343\031\341\032\340\033\344\034\362\035\363\036\347"
            + "\037\352\040\372\041\357\042\335\043\356\044\361\045"
            + "\367\046\337\047\366\050\354\051\370\052\336\053\355"
            + "\054\334\055\342\056\351\057\332\060\353\061\371\062"
            + "\346\063\350\064\364\066\360\001\002\000\020\005\uff87"
            + "\006\uff87\007\uff87\011\uff87\016\uff87\020\uff87\065\uff87\001"
            + "\002\000\104\007\033\011\365\020\034\030\343\031\341"
            + "\032\340\033\344\034\362\035\363\036\347\037\352\040"
            + "\372\041\357\042\335\043\356\044\361\045\367\046\337"
            + "\047\366\050\354\051\370\052\336\053\355\054\334\055"
            + "\342\056\351\057\332\060\353\061\371\062\346\063\350"
            + "\064\364\066\360\001\002\000\020\005\uff8b\006\uff8b\007"
            + "\uff8b\011\uff8b\016\uff8b\020\uff8b\065\uff8b\001\002\000\104"
            + "\007\033\011\365\020\034\030\343\031\341\032\340\033"
            + "\344\034\362\035\363\036\347\037\352\040\372\041\357"
            + "\042\335\043\356\044\361\045\367\046\337\047\366\050"
            + "\354\051\370\052\336\053\355\054\334\055\342\056\351"
            + "\057\332\060\353\061\371\062\346\063\350\064\364\066"
            + "\360\001\002\000\020\005\uff89\006\uff89\007\uff89\011\uff89"
            + "\016\uff89\020\uff89\065\uff89\001\002\000\104\007\033\011"
            + "\365\020\034\030\343\031\341\032\340\033\344\034\362"
            + "\035\363\036\347\037\352\040\372\041\357\042\335\043"
            + "\356\044\361\045\367\046\337\047\366\050\354\051\370"
            + "\052\336\053\355\054\334\055\342\056\351\057\332\060"
            + "\353\061\371\062\346\063\350\064\364\066\360\001\002"
            + "\000\020\005\uff7c\006\uff7c\007\uff7c\011\uff7c\016\uff7c\020"
            + "\uff7c\065\uff7c\001\002\000\104\007\033\011\365\020\034"
            + "\030\343\031\341\032\340\033\344\034\362\035\363\036"
            + "\347\037\352\040\372\041\357\042\335\043\356\044\361"
            + "\045\367\046\337\047\366\050\354\051\370\052\336\053"
            + "\355\054\334\055\342\056\351\057\332\060\353\061\371"
            + "\062\346\063\350\064\364\066\360\001\002\000\020\005"
            + "\uff93\006\uff93\007\uff93\011\uff93\016\uff93\020\uff93\065\uff93"
            + "\001\002\000\104\007\033\011\365\020\034\030\343\031"
            + "\341\032\340\033\344\034\362\035\363\036\347\037\352"
            + "\040\372\041\357\042\335\043\356\044\361\045\367\046"
            + "\337\047\366\050\354\051\370\052\336\053\355\054\334"
            + "\055\342\056\351\057\332\060\353\061\371\062\346\063"
            + "\350\064\364\066\360\001\002\000\020\005\uff94\006\uff94"
            + "\007\uff94\011\uff94\016\uff94\020\uff94\065\uff94\001\002\000"
            + "\104\007\033\011\365\020\034\030\343\031\341\032\340"
            + "\033\344\034\362\035\363\036\347\037\352\040\372\041"
            + "\357\042\335\043\356\044\361\045\367\046\337\047\366"
            + "\050\354\051\370\052\336\053\355\054\334\055\342\056"
            + "\351\057\332\060\353\061\371\062\346\063\350\064\364"
            + "\066\360\001\002\000\020\005\uff8c\006\uff8c\007\uff8c\011"
            + "\uff8c\016\uff8c\020\uff8c\065\uff8c\001\002\000\006\011\125"
            + "\067\127\001\002\000\104\007\033\011\365\020\034\030"
            + "\343\031\341\032\340\033\344\034\362\035\363\036\347"
            + "\037\352\040\372\041\357\042\335\043\356\044\361\045"
            + "\367\046\337\047\366\050\354\051\370\052\336\053\355"
            + "\054\334\055\342\056\351\057\332\060\353\061\371\062"
            + "\346\063\350\064\364\066\360\001\002\000\020\005\uff7b"
            + "\006\uff7b\007\uff7b\011\uff7b\016\uff7b\020\uff7b\065\uff7b\001"
            + "\002\000\104\007\033\011\365\020\034\030\343\031\341"
            + "\032\340\033\344\034\362\035\363\036\347\037\352\040"
            + "\372\041\357\042\335\043\356\044\361\045\367\046\337"
            + "\047\366\050\354\051\370\052\336\053\355\054\334\055"
            + "\342\056\351\057\332\060\353\061\371\062\346\063\350"
            + "\064\364\066\360\001\002\000\020\005\uff8f\006\uff8f\007"
            + "\uff8f\011\uff8f\016\uff8f\020\uff8f\065\uff8f\001\002\000\104"
            + "\007\033\011\365\020\034\030\343\031\341\032\340\033"
            + "\344\034\362\035\363\036\347\037\352\040\372\041\357"
            + "\042\335\043\356\044\361\045\367\046\337\047\366\050"
            + "\354\051\370\052\336\053\355\054\334\055\342\056\351"
            + "\057\332\060\353\061\371\062\346\063\350\064\364\066"
            + "\360\001\002\000\020\005\uff8d\006\uff8d\007\uff8d\011\uff8d"
            + "\016\uff8d\020\uff8d\065\uff8d\001\002\000\104\007\033\011"
            + "\365\020\034\030\343\031\341\032\340\033\344\034\362"
            + "\035\363\036\347\037\352\040\372\041\357\042\335\043"
            + "\356\044\361\045\367\046\337\047\366\050\354\051\370"
            + "\052\336\053\355\054\334\055\342\056\351\057\332\060"
            + "\353\061\371\062\346\063\350\064\364\066\360\001\002"
            + "\000\020\005\uff85\006\uff85\007\uff85\011\uff85\016\uff85\020"
            + "\uff85\065\uff85\001\002\000\104\007\033\011\365\020\034"
            + "\030\343\031\341\032\340\033\344\034\362\035\363\036"
            + "\347\037\352\040\372\041\357\042\335\043\356\044\361"
            + "\045\367\046\337\047\366\050\354\051\370\052\336\053"
            + "\355\054\334\055\342\056\351\057\332\060\353\061\371"
            + "\062\346\063\350\064\364\066\360\001\002\000\020\005"
            + "\uff88\006\uff88\007\uff88\011\uff88\016\uff88\020\uff88\065\uff88"
            + "\001\002\000\104\007\033\011\365\020\034\030\343\031"
            + "\341\032\340\033\344\034\362\035\363\036\347\037\352"
            + "\040\372\041\357\042\335\043\356\044\361\045\367\046"
            + "\337\047\366\050\354\051\370\052\336\053\355\054\334"
            + "\055\342\056\351\057\332\060\353\061\371\062\346\063"
            + "\350\064\364\066\360\001\002\000\020\005\uff80\006\uff80"
            + "\007\uff80\011\uff80\016\uff80\020\uff80\065\uff80\001\002\000"
            + "\104\007\033\011\365\020\034\030\343\031\341\032\340"
            + "\033\344\034\362\035\363\036\347\037\352\040\372\041"
            + "\357\042\335\043\356\044\361\045\367\046\337\047\366"
            + "\050\354\051\370\052\336\053\355\054\334\055\342\056"
            + "\351\057\332\060\353\061\371\062\346\063\350\064\364"
            + "\066\360\001\002\000\020\005\uff91\006\uff91\007\uff91\011"
            + "\uff91\016\uff91\020\uff91\065\uff91\001\002\000\104\007\033"
            + "\011\365\020\034\030\343\031\341\032\340\033\344\034"
            + "\362\035\363\036\347\037\352\040\372\041\357\042\335"
            + "\043\356\044\361\045\367\046\337\047\366\050\354\051"
            + "\370\052\336\053\355\054\334\055\342\056\351\057\332"
            + "\060\353\061\371\062\346\063\350\064\364\066\360\001"
            + "\002\000\020\005\uff83\006\uff83\007\uff83\011\uff83\016\uff83"
            + "\020\uff83\065\uff83\001\002\000\104\007\033\011\365\020"
            + "\034\030\343\031\341\032\340\033\344\034\362\035\363"
            + "\036\347\037\352\040\372\041\357\042\335\043\356\044"
            + "\361\045\367\046\337\047\366\050\354\051\370\052\336"
            + "\053\355\054\334\055\342\056\351\057\332\060\353\061"
            + "\371\062\346\063\350\064\364\066\360\001\002\000\020"
            + "\005\uff7d\006\uff7d\007\uff7d\011\uff7d\016\uff7d\020\uff7d\065"
            + "\uff7d\001\002\000\104\007\033\011\365\020\034\030\343"
            + "\031\341\032\340\033\344\034\362\035\363\036\347\037"
            + "\352\040\372\041\357\042\335\043\356\044\361\045\367"
            + "\046\337\047\366\050\354\051\370\052\336\053\355\054"
            + "\334\055\342\056\351\057\332\060\353\061\371\062\346"
            + "\063\350\064\364\066\360\001\002\000\020\005\uff92\006"
            + "\uff92\007\uff92\011\uff92\016\uff92\020\uff92\065\uff92\001\002"
            + "\000\104\007\033\011\365\020\034\030\343\031\341\032"
            + "\340\033\344\034\362\035\363\036\347\037\352\040\372"
            + "\041\357\042\335\043\356\044\361\045\367\046\337\047"
            + "\366\050\354\051\370\052\336\053\355\054\334\055\342"
            + "\056\351\057\332\060\353\061\371\062\346\063\350\064"
            + "\364\066\360\001\002\000\020\005\uff7e\006\uff7e\007\uff7e"
            + "\011\uff7e\016\uff7e\020\uff7e\065\uff7e\001\002\000\036\007"
            + "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a"
            + "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\065"
            + "\uff9a\001\002\000\104\007\033\011\365\020\034\030\343"
            + "\031\341\032\340\033\344\034\362\035\363\036\347\037"
            + "\352\040\372\041\357\042\335\043\356\044\361\045\367"
            + "\046\337\047\366\050\354\051\370\052\336\053\355\054"
            + "\334\055\342\056\351\057\332\060\353\061\371\062\346"
            + "\063\350\064\364\066\360\001\002\000\020\005\uff95\006"
            + "\uff95\007\uff95\011\uff95\016\uff95\020\uff95\065\uff95\001\002"
            + "\000\104\007\033\011\365\020\034\030\343\031\341\032"
            + "\340\033\344\034\362\035\363\036\347\037\352\040\372"
            + "\041\357\042\335\043\356\044\361\045\367\046\337\047"
            + "\366\050\354\051\370\052\336\053\355\054\334\055\342"
            + "\056\351\057\332\060\353\061\371\062\346\063\350\064"
            + "\364\066\360\001\002\000\020\005\uff98\006\uff98\007\uff98"
            + "\011\uff98\016\uff98\020\uff98\065\uff98\001\002\000\104\007"
            + "\033\011\365\020\034\030\343\031\341\032\340\033\344"
            + "\034\362\035\363\036\347\037\352\040\372\041\357\042"
            + "\335\043\356\044\361\045\367\046\337\047\366\050\354"
            + "\051\370\052\336\053\355\054\334\055\342\056\351\057"
            + "\332\060\353\061\371\062\346\063\350\064\364\066\360"
            + "\001\002\000\020\005\uff84\006\uff84\007\uff84\011\uff84\016"
            + "\uff84\020\uff84\065\uff84\001\002\000\104\007\033\011\365"
            + "\020\034\030\343\031\341\032\340\033\344\034\362\035"
            + "\363\036\347\037\352\040\372\041\357\042\335\043\356"
            + "\044\361\045\367\046\337\047\366\050\354\051\370\052"
            + "\336\053\355\054\334\055\342\056\351\057\332\060\353"
            + "\061\371\062\346\063\350\064\364\066\360\001\002\000"
            + "\020\005\uff97\006\uff97\007\uff97\011\uff97\016\uff97\020\uff97"
            + "\065\uff97\001\002\000\104\007\033\011\365\020\034\030"
            + "\343\031\341\032\340\033\344\034\362\035\363\036\347"
            + "\037\352\040\372\041\357\042\335\043\356\044\361\045"
            + "\367\046\337\047\366\050\354\051\370\052\336\053\355"
            + "\054\334\055\342\056\351\057\332\060\353\061\371\062"
            + "\346\063\350\064\364\066\360\001\002\000\020\005\uff96"
            + "\006\uff96\007\uff96\011\uff96\016\uff96\020\uff96\065\uff96\001"
            + "\002\000\104\007\033\011\365\020\034\030\343\031\341"
            + "\032\340\033\344\034\362\035\363\036\347\037\352\040"
            + "\372\041\357\042\335\043\356\044\361\045\367\046\337"
            + "\047\366\050\354\051\370\052\336\053\355\054\334\055"
            + "\342\056\351\057\332\060\353\061\371\062\346\063\350"
            + "\064\364\066\360\001\002\000\020\005\uff8a\006\uff8a\007"
            + "\uff8a\011\uff8a\016\uff8a\020\uff8a\065\uff8a\001\002\000\104"
            + "\007\033\011\365\020\034\030\343\031\341\032\340\033"
            + "\344\034\362\035\363\036\347\037\352\040\372\041\357"
            + "\042\335\043\356\044\361\045\367\046\337\047\366\050"
            + "\354\051\370\052\336\053\355\054\334\055\342\056\351"
            + "\057\332\060\353\061\371\062\346\063\350\064\364\066"
            + "\360\001\002\000\020\005\uff86\006\uff86\007\uff86\011\uff86"
            + "\016\uff86\020\uff86\065\uff86\001\002\000\104\007\033\011"
            + "\365\020\034\030\343\031\341\032\340\033\344\034\362"
            + "\035\363\036\347\037\352\040\372\041\357\042\335\043"
            + "\356\044\361\045\367\046\337\047\366\050\354\051\370"
            + "\052\336\053\355\054\334\055\342\056\351\057\332\060"
            + "\353\061\371\062\346\063\350\064\364\066\360\001\002"
            + "\000\020\005\uff8e\006\uff8e\007\uff8e\011\uff8e\016\uff8e\020"
            + "\uff8e\065\uff8e\001\002\000\104\007\033\011\365\020\034"
            + "\030\343\031\341\032\340\033\344\034\362\035\363\036"
            + "\347\037\352\040\372\041\357\042\335\043\356\044\361"
            + "\045\367\046\337\047\366\050\354\051\370\052\336\053"
            + "\355\054\334\055\342\056\351\057\332\060\353\061\371"
            + "\062\346\063\350\064\364\066\360\001\002\000\020\005"
            + "\uff82\006\uff82\007\uff82\011\uff82\016\uff82\020\uff82\065\uff82"
            + "\001\002\000\020\005\uff7a\006\uff7a\007\uff7a\011\uff7a\016"
            + "\uff7a\020\uff7a\065\uff7a\001\002\000\104\007\033\011\365"
            + "\020\034\030\343\031\341\032\340\033\344\034\362\035"
            + "\363\036\347\037\352\040\372\041\357\042\335\043\356"
            + "\044\361\045\367\046\337\047\366\050\354\051\370\052"
            + "\336\053\355\054\334\055\342\056\351\057\332\060\353"
            + "\061\371\062\346\063\350\064\364\066\360\001\002\000"
            + "\020\005\uff81\006\uff81\007\uff81\011\uff81\016\uff81\020\uff81"
            + "\065\uff81\001\002\000\036\007\uff9b\011\uff9b\012\uff9b\013"
            + "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b"
            + "\022\uff9b\023\uff9b\024\uff9b\065\uff9b\001\002\000\020\005"
            + "\326\006\322\007\033\011\320\016\323\020\034\065\325"
            + "\001\002\000\036\007\uff9e\011\uff9e\012\uff9e\013\uff9e\014"
            + "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e"
            + "\023\uff9e\024\uff9e\065\uff9e\001\002\000\020\005\326\006"
            + "\322\007\033\011\320\016\323\020\034\065\325\001\002"
            + "\000\036\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015"
            + "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c"
            + "\024\uff9c\065\uff9c\001\002\000\030\011\u0141\033\u0148\034"
            + "\u0145\035\u0147\036\u014a\037\u0142\040\u0144\041\u0149\044\u0140"
            + "\050\u014b\051\u0146\001\002\000\004\027\u015e\001\002\000"
            + "\036\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde"
            + "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024"
            + "\uffde\065\uffde\001\002\000\004\026\u015c\001\002\000\036"
            + "\007\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016"
            + "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec"
            + "\065\uffec\001\002\000\004\026\u015a\001\002\000\004\027"
            + "\u0158\001\002\000\004\026\u0156\001\002\000\004\027\u0154"
            + "\001\002\000\004\027\u0152\001\002\000\004\026\u0150\001"
            + "\002\000\004\026\u014e\001\002\000\004\026\u014c\001\002"
            + "\000\030\011\u0141\033\u0148\034\u0145\035\u0147\036\u014a\037"
            + "\u0142\040\u0144\041\u0149\044\u0140\050\u014b\051\u0146\001\002"
            + "\000\036\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015"
            + "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0"
            + "\024\uffe0\065\uffe0\001\002\000\030\011\u0141\033\u0148\034"
            + "\u0145\035\u0147\036\u014a\037\u0142\040\u0144\041\u0149\044\u0140"
            + "\050\u014b\051\u0146\001\002\000\036\007\uffe5\011\uffe5\012"
            + "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5"
            + "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\065\uffe5\001\002\000"
            + "\030\011\u0141\033\u0148\034\u0145\035\u0147\036\u014a\037\u0142"
            + "\040\u0144\041\u0149\044\u0140\050\u014b\051\u0146\001\002\000"
            + "\036\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2"
            + "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024"
            + "\uffe2\065\uffe2\001\002\000\030\011\u0141\033\u0148\034\u0145"
            + "\035\u0147\036\u014a\037\u0142\040\u0144\041\u0149\044\u0140\050"
            + "\u014b\051\u0146\001\002\000\036\007\uffe8\011\uffe8\012\uffe8"
            + "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021"
            + "\uffe8\022\uffe8\023\uffe8\024\uffe8\065\uffe8\001\002\000\030"
            + "\011\u0141\033\u0148\034\u0145\035\u0147\036\u014a\037\u0142\040"
            + "\u0144\041\u0149\044\u0140\050\u014b\051\u0146\001\002\000\036"
            + "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016"
            + "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6"
            + "\065\uffe6\001\002\000\030\011\u0141\033\u0148\034\u0145\035"
            + "\u0147\036\u014a\037\u0142\040\u0144\041\u0149\044\u0140\050\u014b"
            + "\051\u0146\001\002\000\036\007\uffdf\011\uffdf\012\uffdf\013"
            + "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf"
            + "\022\uffdf\023\uffdf\024\uffdf\065\uffdf\001\002\000\030\011"
            + "\u0141\033\u0148\034\u0145\035\u0147\036\u014a\037\u0142\040\u0144"
            + "\041\u0149\044\u0140\050\u014b\051\u0146\001\002\000\036\007"
            + "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7"
            + "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\065"
            + "\uffe7\001\002\000\030\011\u0141\033\u0148\034\u0145\035\u0147"
            + "\036\u014a\037\u0142\040\u0144\041\u0149\044\u0140\050\u014b\051"
            + "\u0146\001\002\000\036\007\uffe3\011\uffe3\012\uffe3\013\uffe3"
            + "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022"
            + "\uffe3\023\uffe3\024\uffe3\065\uffe3\001\002\000\030\011\u0141"
            + "\033\u0148\034\u0145\035\u0147\036\u014a\037\u0142\040\u0144\041"
            + "\u0149\044\u0140\050\u014b\051\u0146\001\002\000\036\007\uffe4"
            + "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017"
            + "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\065\uffe4"
            + "\001\002\000\030\011\u0141\033\u0148\034\u0145\035\u0147\036"
            + "\u014a\037\u0142\040\u0144\041\u0149\044\u0140\050\u014b\051\u0146"
            + "\001\002\000\036\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014"
            + "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1"
            + "\023\uffe1\024\uffe1\065\uffe1\001\002\000\010\007\u0161\011"
            + "\u0164\047\u0163\001\002\000\004\026\u018b\001\002\000\036"
            + "\007\007\011\022\012\024\013\014\014\030\015\016\016"
            + "\013\017\012\020\026\021\023\022\021\023\017\024\027"
            + "\065\015\001\002\000\004\010\u0165\001\002\000\036\007"
            + "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8"
            + "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\065"
            + "\uffd8\001\002\000\004\065\u0166\001\002\000\004\010\u0167"
            + "\001\002\000\030\011\u0169\036\u0171\042\u0172\043\u0168\050"
            + "\u0173\051\u016d\052\u016b\053\u016a\054\u016f\061\u016e\064\u016c"
            + "\001\002\000\004\026\u0188\001\002\000\004\011\uffc1\001"
            + "\002\000\004\026\u0186\001\002\000\004\026\u0184\001\002"
            + "\000\004\026\u0182\001\002\000\004\026\u0180\001\002\000"
            + "\004\025\u017e\001\002\000\004\026\u017c\001\002\000\004"
            + "\011\u017a\001\002\000\004\026\u0178\001\002\000\004\026"
            + "\u0176\001\002\000\004\026\u0174\001\002\000\030\011\u0169"
            + "\036\u0171\042\u0172\043\u0168\050\u0173\051\u016d\052\u016b\053"
            + "\u016a\054\u016f\061\u016e\064\u016c\001\002\000\004\011\uffcb"
            + "\001\002\000\030\011\u0169\036\u0171\042\u0172\043\u0168\050"
            + "\u0173\051\u016d\052\u016b\053\u016a\054\u016f\061\u016e\064\u016c"
            + "\001\002\000\004\011\uffc7\001\002\000\030\011\u0169\036"
            + "\u0171\042\u0172\043\u0168\050\u0173\051\u016d\052\u016b\053\u016a"
            + "\054\u016f\061\u016e\064\u016c\001\002\000\004\011\uffc2\001"
            + "\002\000\010\007\u0161\011\u0164\047\u0163\001\002\000\036"
            + "\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016"
            + "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9"
            + "\065\uffd9\001\002\000\030\011\u0169\036\u0171\042\u0172\043"
            + "\u0168\050\u0173\051\u016d\052\u016b\053\u016a\054\u016f\061\u016e"
            + "\064\u016c\001\002\000\004\011\uffc5\001\002\000\030\011"
            + "\u0169\036\u0171\042\u0172\043\u0168\050\u0173\051\u016d\052\u016b"
            + "\053\u016a\054\u016f\061\u016e\064\u016c\001\002\000\004\011"
            + "\uffc4\001\002\000\030\011\u0169\036\u0171\042\u0172\043\u0168"
            + "\050\u0173\051\u016d\052\u016b\053\u016a\054\u016f\061\u016e\064"
            + "\u016c\001\002\000\004\011\uffca\001\002\000\030\011\u0169"
            + "\036\u0171\042\u0172\043\u0168\050\u0173\051\u016d\052\u016b\053"
            + "\u016a\054\u016f\061\u016e\064\u016c\001\002\000\004\011\uffc3"
            + "\001\002\000\030\011\u0169\036\u0171\042\u0172\043\u0168\050"
            + "\u0173\051\u016d\052\u016b\053\u016a\054\u016f\061\u016e\064\u016c"
            + "\001\002\000\004\011\uffc9\001\002\000\030\011\u0169\036"
            + "\u0171\042\u0172\043\u0168\050\u0173\051\u016d\052\u016b\053\u016a"
            + "\054\u016f\061\u016e\064\u016c\001\002\000\004\011\uffc8\001"
            + "\002\000\030\011\u0169\036\u0171\042\u0172\043\u0168\050\u0173"
            + "\051\u016d\052\u016b\053\u016a\054\u016f\061\u016e\064\u016c\001"
            + "\002\000\004\011\uffc6\001\002\000\004\002\ufffd\001\002"
            + "\000\010\007\u0161\011\u0164\047\u0163\001\002\000\036\007"
            + "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda"
            + "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\065"
            + "\uffda\001\002\000\036\007\ufff8\011\ufff8\012\ufff8\013\ufff8"
            + "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022"
            + "\ufff8\023\ufff8\024\ufff8\065\ufff8\001\002\000\036\007\ufff7"
            + "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017"
            + "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\065\ufff7"
            + "\001\002\000\036\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014"
            + "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0"
            + "\023\ufff0\024\ufff0\065\ufff0\001\002\000\036\007\uffee\011"
            + "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee"
            + "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\065\uffee\001"
            + "\002\000\036\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef"
            + "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023"
            + "\uffef\024\uffef\065\uffef\001\002\000\026\007\007\011\u0193"
            + "\016\013\017\012\020\026\021\023\022\021\023\017\024"
            + "\027\065\015\001\002\000\036\007\uffe9\011\uffe9\012\uffe9"
            + "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021"
            + "\uffe9\022\uffe9\023\uffe9\024\uffe9\065\uffe9\001\002\000\026"
            + "\007\007\011\u0193\016\013\017\012\020\026\021\023\022"
            + "\021\023\017\024\027\065\015\001\002\000\036\007\uffed"
            + "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017"
            + "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\065\uffed"
            + "\001\002\000\036\007\uffea\011\uffea\012\uffea\013\uffea\014"
            + "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea"
            + "\023\uffea\024\uffea\065\uffea\001\002\000\004\002\000\001"
            + "\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\u0195\000\004\003\003\001\001\000\002\001\001\000"
            + "\002\001\001\000\012\004\007\005\017\012\010\013\024"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\012\004\314\005\017\012\010\013\024\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\012\004\230\005\017\012\010\013\024\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\006\014\037\015\034\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\006\014\037\015\040\001\001"
            + "\000\002\001\001\000\006\014\043\022\060\001\001\000"
            + "\002\001\001\000\006\014\043\022\210\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\006\014\037\015\157"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\006\014\043\022\102\001\001\000\002\001\001"
            + "\000\006\014\043\022\104\001\001\000\002\001\001\000"
            + "\006\014\043\022\106\001\001\000\002\001\001\000\006"
            + "\014\043\022\110\001\001\000\002\001\001\000\006\014"
            + "\043\022\112\001\001\000\002\001\001\000\006\014\043"
            + "\022\114\001\001\000\002\001\001\000\006\014\043\022"
            + "\116\001\001\000\002\001\001\000\006\014\043\022\120"
            + "\001\001\000\002\001\001\000\006\014\043\022\122\001"
            + "\001\000\002\001\001\000\004\024\125\001\001\000\002"
            + "\001\001\000\006\014\043\022\144\001\001\000\002\001"
            + "\001\000\004\025\134\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\004\024"
            + "\135\001\001\000\002\001\001\000\004\025\137\001\001"
            + "\000\002\001\001\000\004\025\141\001\001\000\002\001"
            + "\001\000\004\025\143\001\001\000\002\001\001\000\002"
            + "\001\001\000\006\014\043\022\146\001\001\000\002\001"
            + "\001\000\006\014\043\022\150\001\001\000\002\001\001"
            + "\000\006\014\043\022\152\001\001\000\002\001\001\000"
            + "\006\014\043\022\154\001\001\000\002\001\001\000\006"
            + "\014\043\022\156\001\001\000\002\001\001\000\002\001"
            + "\001\000\006\014\043\022\161\001\001\000\002\001\001"
            + "\000\006\014\043\022\163\001\001\000\002\001\001\000"
            + "\006\014\043\022\165\001\001\000\002\001\001\000\006"
            + "\014\043\022\167\001\001\000\002\001\001\000\006\014"
            + "\043\022\171\001\001\000\002\001\001\000\006\014\043"
            + "\022\173\001\001\000\002\001\001\000\006\014\043\022"
            + "\175\001\001\000\002\001\001\000\006\014\043\022\177"
            + "\001\001\000\002\001\001\000\006\014\043\022\201\001"
            + "\001\000\002\001\001\000\006\014\043\022\203\001\001"
            + "\000\002\001\001\000\006\014\043\022\205\001\001\000"
            + "\002\001\001\000\006\014\043\022\207\001\001\000\002"
            + "\001\001\000\002\001\001\000\006\014\043\022\212\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\006\014\222\020"
            + "\220\001\001\000\002\001\001\000\002\001\001\000\006"
            + "\014\222\020\223\001\001\000\002\001\001\000\006\014"
            + "\037\015\225\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\004\007\234\001"
            + "\001\000\002\001\001\000\002\001\001\000\012\004\236"
            + "\005\017\012\010\013\024\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
            + "\010\252\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\010\260\001\001\000\002\001"
            + "\001\000\004\010\262\001\001\000\002\001\001\000\004"
            + "\010\264\001\001\000\002\001\001\000\004\010\266\001"
            + "\001\000\002\001\001\000\004\007\270\001\001\000\002"
            + "\001\001\000\004\010\272\001\001\000\002\001\001\000"
            + "\004\010\274\001\001\000\002\001\001\000\004\010\276"
            + "\001\001\000\002\001\001\000\004\010\300\001\001\000"
            + "\002\001\001\000\004\010\302\001\001\000\002\001\001"
            + "\000\004\010\304\001\001\000\002\001\001\000\004\010"
            + "\306\001\001\000\002\001\001\000\004\007\310\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\006"
            + "\014\323\016\320\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\006\014\323"
            + "\016\u0139\001\001\000\002\001\001\000\002\001\001\000"
            + "\006\014\323\016\327\001\001\000\002\001\001\000\006"
            + "\014\332\023\344\001\001\000\002\001\001\000\006\014"
            + "\332\023\u0136\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\006\014\323\016\u0123\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\006\014\332\023\373\001\001\000\002"
            + "\001\001\000\006\014\332\023\375\001\001\000\002\001"
            + "\001\000\006\014\332\023\377\001\001\000\002\001\001"
            + "\000\006\014\332\023\u0101\001\001\000\002\001\001\000"
            + "\006\014\332\023\u0103\001\001\000\002\001\001\000\006"
            + "\014\332\023\u0105\001\001\000\002\001\001\000\006\014"
            + "\332\023\u0107\001\001\000\002\001\001\000\006\014\332"
            + "\023\u0109\001\001\000\002\001\001\000\006\014\332\023"
            + "\u010b\001\001\000\002\001\001\000\004\024\u010d\001\001"
            + "\000\006\014\332\023\u010e\001\001\000\002\001\001\000"
            + "\006\014\332\023\u0110\001\001\000\002\001\001\000\006"
            + "\014\332\023\u0112\001\001\000\002\001\001\000\006\014"
            + "\332\023\u0114\001\001\000\002\001\001\000\006\014\332"
            + "\023\u0116\001\001\000\002\001\001\000\006\014\332\023"
            + "\u0118\001\001\000\002\001\001\000\006\014\332\023\u011a"
            + "\001\001\000\002\001\001\000\006\014\332\023\u011c\001"
            + "\001\000\002\001\001\000\006\014\332\023\u011e\001\001"
            + "\000\002\001\001\000\006\014\332\023\u0120\001\001\000"
            + "\002\001\001\000\006\014\332\023\u0122\001\001\000\002"
            + "\001\001\000\002\001\001\000\006\014\332\023\u0125\001"
            + "\001\000\002\001\001\000\006\014\332\023\u0127\001\001"
            + "\000\002\001\001\000\006\014\332\023\u0129\001\001\000"
            + "\002\001\001\000\006\014\332\023\u012b\001\001\000\002"
            + "\001\001\000\006\014\332\023\u012d\001\001\000\002\001"
            + "\001\000\006\014\332\023\u012f\001\001\000\002\001\001"
            + "\000\006\014\332\023\u0131\001\001\000\002\001\001\000"
            + "\006\014\332\023\u0133\001\001\000\002\001\001\000\006"
            + "\014\332\023\u0135\001\001\000\002\001\001\000\002\001"
            + "\001\000\006\014\332\023\u0138\001\001\000\002\001\001"
            + "\000\002\001\001\000\006\014\323\016\u013b\001\001\000"
            + "\002\001\001\000\006\014\323\016\u013d\001\001\000\002"
            + "\001\001\000\004\021\u0142\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\021\u014c\001\001\000\002\001"
            + "\001\000\004\021\u014e\001\001\000\002\001\001\000\004"
            + "\021\u0150\001\001\000\002\001\001\000\004\021\u0152\001"
            + "\001\000\002\001\001\000\004\021\u0154\001\001\000\002"
            + "\001\001\000\004\021\u0156\001\001\000\002\001\001\000"
            + "\004\021\u0158\001\001\000\002\001\001\000\004\021\u015a"
            + "\001\001\000\002\001\001\000\004\021\u015c\001\001\000"
            + "\002\001\001\000\004\021\u015e\001\001\000\002\001\001"
            + "\000\004\006\u0161\001\001\000\002\001\001\000\012\004"
            + "\u0189\005\017\012\010\013\024\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\004\011\u016f\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\011\u0174\001\001\000\002\001\001\000\004"
            + "\011\u0176\001\001\000\002\001\001\000\004\011\u0178\001"
            + "\001\000\002\001\001\000\004\006\u017a\001\001\000\002"
            + "\001\001\000\004\011\u017c\001\001\000\002\001\001\000"
            + "\004\011\u017e\001\001\000\002\001\001\000\004\011\u0180"
            + "\001\001\000\002\001\001\000\004\011\u0182\001\001\000"
            + "\002\001\001\000\004\011\u0184\001\001\000\002\001\001"
            + "\000\004\011\u0186\001\001\000\002\001\001\000\004\011"
            + "\u0188\001\001\000\002\001\001\000\002\001\001\000\004"
            + "\006\u018b\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\010\012\010\013\u0193\017\u0194\001\001\000"
            + "\002\001\001\000\010\012\010\013\u0193\017\u0195\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    /**
     * Prints out debug messages if debug is active.
     * 
     * @param msg
     *            the message to be printed.
     */
    private void debug(String msg) {
        if (action_obj.debug) {
            System.out.print(msg);
        }
    }

    /**
     * Returns the read in graph from the parser.
     * 
     * @return the read in graph.
     */
    public Graph getGraph() {
        return action_obj.getGraph();
    }

    // for debugging only
    public NodeGraphicAttribute getNodeStyle() {
        return action_obj.getNodeStyle();
    }

    // for debugging only
    public EdgeGraphicAttribute getEdgeStyle() {
        return action_obj.getEdgeStyle();
    }

    // for testing the parser from the command line.
    public static void main(String args[]) {
        parser p = new parser(new Yylex(System.in));
        try {
            p.parse();
            Graph g = p.getGraph();
            p.debug("------------------------------------------\n");
            p.debug("Graph read in: \n");
            p.debug("#nodes = " + g.getNumberOfNodes() + ", #edges = "
                    + g.getNumberOfEdges() + "\n");

            int count = 0;
            for (Iterator itr = g.getNodesIterator(); itr.hasNext();) {
                Node n = (Node) itr.next();
                count++;
                p.debug("node " + count + ": \n");
                Map m = n.getAttributes().getCollection();
                printMap(p, m);
            }

            count = 0;
            for (Iterator itr = g.getEdgesIterator(); itr.hasNext();) {
                Edge e = (Edge) itr.next();
                count++;
                p.debug("edge " + count + ": \n");
                Map m = e.getAttributes().getCollection();
                printMap(p, m);
            }

            p.debug("------------------------------------------\n");
            // printMap(p, p.getNodeStyle().getCollection());
            // printMap(p, p.getEdgeStyle().getCollection());

        } catch (Exception e) {
            e.printStackTrace(System.err);
            p.debug("------------------------------------------\n");
            p.debug("Graph could not properly be created.\n");
            p.debug("------------------------------------------\n");
        }
    }

    // required for testing from command line.
    private static void printMap(parser p, Map m) {
        String indent = "\t";
        for (Iterator i = m.keySet().iterator(); i.hasNext();) {
            Attribute attr = ((Attribute) m.get(i.next()));
            try {
                Map map = ((CollectionAttribute) attr).getCollection();
                printMap(p, map);
            } catch (ClassCastException cce) {
                p.debug(indent + attr.getPath() + " - " + attr.getValue()
                        + "\n");
            }
        }
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {

    /**
     * Indicated whether or not the graph is directed.
     */
    private boolean directed = false;

    /**
     * Contains a mapping from id to the corresponding node.
     */
    private HashMap nodeMap = new HashMap();

    /**
     * The graph being read in.
     */
    private Graph g = new OptAdjListGraph();

    /**
     * The default node graphic attribute.
     */
    private NodeGraphicAttribute nodeStyle = new NodeGraphicAttribute();

    /**
     * The default edge graphic attribute.
     */
    private EdgeGraphicAttribute edgeStyle = new EdgeGraphicAttribute();

    /**
     * <code>true</code>, if debug mode is active, <code>false</code> otherwise.
     */
    boolean debug = false;

    /**
     * Prints out debug messages if debug is active.
     * 
     * @param msg
     *            the message to be printed.
     */
    private void debug(String msg) {
        if (debug) {
            System.out.print(msg);
        }
    }

    /**
     * Returns the read in graph.
     * 
     * @return the read in graph.
     */
    public Graph getGraph() {
        return g;
    }

    // only for debugging
    public NodeGraphicAttribute getNodeStyle() {
        return nodeStyle;
    }

    // only for debugging
    public EdgeGraphicAttribute getEdgeStyle() {
        return edgeStyle;
    }

    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack, int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 149: // COORD ::= CBRACE
        {
            CoordinateAttribute RESULT = null;

            RESULT = new CoordinateAttribute("bend");

            CUP$parser$result = new java_cup.runtime.Symbol(19/* COORD */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 148: // COORD ::= POINT_Z REAL COORD
        {
            CoordinateAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CoordinateAttribute c = (CoordinateAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            c.add(new DoubleAttribute("z", r.doubleValue()));
            debug("point.z " + r + "\n");
            RESULT = c;

            CUP$parser$result = new java_cup.runtime.Symbol(19/* COORD */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 147: // COORD ::= POINT_Y REAL COORD
        {
            CoordinateAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CoordinateAttribute c = (CoordinateAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            c.setY(r.doubleValue());
            debug("point.y " + r + "\n");
            RESULT = c;

            CUP$parser$result = new java_cup.runtime.Symbol(19/* COORD */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 146: // COORD ::= POINT_X REAL COORD
        {
            CoordinateAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CoordinateAttribute c = (CoordinateAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            c.setX(r.doubleValue());
            debug("point.x " + r + "\n");
            RESULT = c;

            CUP$parser$result = new java_cup.runtime.Symbol(19/* COORD */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 145: // LINE_POINTS ::= CBRACE
        {
            List RESULT = null;

            RESULT = new LinkedList();

            CUP$parser$result = new java_cup.runtime.Symbol(
                    18/* LINE_POINTS */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 144: // LINE_POINTS ::= GRAPHICS_POINT SBRACE COORD
            // LINE_POINTS
        {
            List RESULT = null;
            int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            CoordinateAttribute c = (CoordinateAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            l.add(c);
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(
                    18/* LINE_POINTS */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 143: // LIST ::= CBRACE
        {
            List RESULT = null;

            RESULT = new LinkedList();

            CUP$parser$result = new java_cup.runtime.Symbol(14/* LIST */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 142: // LIST ::= KEYVALUE LIST
        {
            List RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute k = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("rule LIST ... ");
            RESULT = new LinkedList(l);
            RESULT.add(k);
            debug(k.getValue() + " added.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(14/* LIST */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 141: // KEYVALUE ::= LABEL STRING
        {
            Attribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            LabelAttribute labelAttr = new LabelAttribute("label");
            labelAttr.setLabel(s);
            RESULT = labelAttr;
            debug("LabelAttribute with id label and value " + s + " ... \n");

            CUP$parser$result = new java_cup.runtime.Symbol(10/* KEYVALUE */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 140: // KEYVALUE ::= KEY SBRACE LIST
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            CollectionAttribute ca = new HashMapAttribute(k);
            for (Iterator itr = l.iterator(); itr.hasNext();) {
                Attribute a = (Attribute) itr.next();
                ca.add(a);
            }
            RESULT = ca;
            debug("CollectionAttribute with id " + k + " ... \n");

            CUP$parser$result = new java_cup.runtime.Symbol(10/* KEYVALUE */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 139: // KEYVALUE ::= KEY STRING
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new StringAttribute(k, s);
            debug("StringAttribute with id " + k + " and value " + s
                    + " ... \n");

            CUP$parser$result = new java_cup.runtime.Symbol(10/* KEYVALUE */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 138: // KEYVALUE ::= KEY REAL
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new DoubleAttribute(k, r);
            debug("DoubleAttribute with id " + k + " and value " + r
                    + " ... \n");

            CUP$parser$result = new java_cup.runtime.Symbol(10/* KEYVALUE */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 137: // KEYVALUE ::= KEY INTEGER
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new IntegerAttribute(k, i);
            debug("IntegerAttribute with id " + k + " and value " + i
                    + " ... \n");

            CUP$parser$result = new java_cup.runtime.Symbol(10/* KEYVALUE */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 136: // E_GFX_ITEM ::= CBRACE
        {
            EdgeGraphicAttribute RESULT = null;

            RESULT = (EdgeGraphicAttribute) edgeStyle.copy();

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 135: // E_GFX_ITEM ::= KEYVALUE E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute k = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute ngi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("attribute in graphics.\n");
            try {
                ngi.add(k);
                debug("added attribute with label " + k.getId()
                        + " in graphics.\n");
            } catch (AttributeExistsException aee) {
                Attribute existsAttr = ngi.getAttribute(k.getPath());
                if (k instanceof CollectionAttribute) {
                    if (!(existsAttr instanceof CollectionAttribute)) {
                        System.err
                                .println("Attribute with ID "
                                        + k.getId()
                                        + " is a CollectionAttribute but should be a simple"
                                        + " attribute of type "
                                        + existsAttr.getClass().getName()
                                        + " ... not loaded!");
                    } else {
                        // both CollectionAttributes, check size of maps
                        Map valueToSet = (Map) k.getValue();
                        if (((Map) existsAttr.getValue()).size() > valueToSet
                                .size()) {
                            System.err
                                    .println("Attribute with ID "
                                            + k.getId()
                                            + " is a standard attribute but file does not provide"
                                            + " all sub attributes... not loaded!");
                        } else {
                            if (((Map) existsAttr.getValue()).size() < valueToSet
                                    .size()) {
                                System.err
                                        .println("Warning: Attribute with ID "
                                                + k.getId()
                                                + " is a standard attribute but file provides"
                                                + " too many sub attributes... trying to load anyway...");
                            }
                            try {
                                existsAttr.setValue(k.getValue());
                            } catch (Exception eee) {
                                System.err
                                        .println("Attribute with ID "
                                                + k.getId()
                                                + " is a standard attribute but file provides"
                                                + " unexpected / missing sub attributes... not loaded!");
                            }
                        }
                    }
                } else {
                    try {
                        existsAttr.setValue(k.getValue());
                    } catch (ClassCastException cce2) {
                        System.err.println("Attribute with ID " + k.getId()
                                + " has a different type as expected ("
                                + k.getClass().getName() + " instead of "
                                + existsAttr.getClass().getName()
                                + ") ... not loaded");
                    }
                }
                debug("attr already there, overrode value "
                        + "(if no error occurred).\n");
            }

            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 134: // E_GFX_ITEM ::= GRAPHICS_LINE SBRACE LINE_POINTS
            // E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            int count = 0;
            SortedCollectionAttribute sca = egi.getBends();
            // gml ignores first and last point !?
            l = l.subList(1, l.size() - 1);

            for (ListIterator iter = l.listIterator(l.size()); iter
                    .hasPrevious();) {
                CoordinateAttribute cAttr = (CoordinateAttribute) iter
                        .previous();
                sca.add(new CoordinateAttribute("bend" + count++, cAttr.getX(),
                        cAttr.getY()));
            }
            if (!l.isEmpty()
                    && !GraphicAttributeConstants.SMOOTH_CLASSNAME.equals(egi
                            .getShape())) {
                egi.setShape(GraphicAttributeConstants.POLYLINE_CLASSNAME);
            }
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 133: // E_GFX_ITEM ::= GRAPHICS_FONT STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: font (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 132: // E_GFX_ITEM ::= GRAPHICS_JUSTIFY STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: justify (ignored):.\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 131: // E_GFX_ITEM ::= GRAPHICS_SPLINESTEPS INTEGER
            // E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: spline steps (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 130: // E_GFX_ITEM ::= GRAPHICS_SMOOTH INTEGER E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            egi
                    .setShape("org.graffiti.plugins.views.defaults.SmoothLineEdgeShape");
            debug("graphics: smooth (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 129: // E_GFX_ITEM ::= GRAPHICS_JOINSTYLE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: joinstyle (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 128: // E_GFX_ITEM ::= GRAPHICS_CAPSTYLE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: capstyle (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 127: // E_GFX_ITEM ::= GRAPHICS_ARROW STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: arrow.\n");
            if ("first".equals(s) || "both".equals(s)) {
                egi
                        .setArrowtail("org.graffiti.plugins.views.defaults.StandardArrowShape");
            }
            if ("last".equals(s) || "both".equals(s)) {
                egi
                        .setArrowhead("org.graffiti.plugins.views.defaults.StandardArrowShape");
            }
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 126: // E_GFX_ITEM ::= GRAPHICS_ARROW_TAIL STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: arrow tail.\n");
            egi.setArrowtail(s);
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 125: // E_GFX_ITEM ::= GRAPHICS_ARROW_HEAD STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: arrow head.\n");
            egi.setArrowhead(s);
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 124: // E_GFX_ITEM ::= GRAPHICS_IMAGE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ImageAttribute image = new ImageAttribute("image");
            image.setReference(s);
            egi.setBackgroundImage(image);
            debug("graphics: image set to" + s + ".\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 123: // E_GFX_ITEM ::= GRAPHICS_BITMAP STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: bitmap (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 122: // E_GFX_ITEM ::= GRAPHICS_FOREGROUND STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("TODO: set the right foreground color.\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 121: // E_GFX_ITEM ::= GRAPHICS_BACKGROUND STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("TODO: set the right background color.\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 120: // E_GFX_ITEM ::= GRAPHICS_STYLE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: style (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 119: // E_GFX_ITEM ::= GRAPHICS_START REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: start (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 118: // E_GFX_ITEM ::= GRAPHICS_EXTENT REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: extent (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 117: // E_GFX_ITEM ::= GRAPHICS_WIDTH REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: width2 = " + r + "\n");
            egi.setFrameThickness(r.doubleValue());
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 116: // E_GFX_ITEM ::= GRAPHICS_ANCHOR STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: anchor (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 115: // E_GFX_ITEM ::= GRAPHICS_STIPPLE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: stripple (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 114: // E_GFX_ITEM ::= GRAPHICS_OUTLINE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: outline (ignored).\n");
            ColorAttribute outlineAttr = new ColorAttribute("outline");
            try {
                outlineAttr.setColor(Color.decode(s));
            } catch (NumberFormatException nfe) {
            }
            egi.setFramecolor(outlineAttr);
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 113: // E_GFX_ITEM ::= GRAPHICS_FILL STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: fill: (ignored).\n");
            ColorAttribute fillAttr = new ColorAttribute("fill");
            try {
                fillAttr.setColor(Color.decode(s));
            } catch (NumberFormatException nfe) {
            }
            egi.setFillcolor(fillAttr);
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 112: // E_GFX_ITEM ::= GRAPHICS_VISIBLE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: visible (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 111: // E_GFX_ITEM ::= GRAPHICS_TYPE STRING E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            if (s.equals("line")) {
                s = "org.graffiti.plugins.views.defaults.StraightLineEdgeShape";
            }
            egi.setShape(s);
            debug("graphics: edge type set to " + s + ".\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 110: // E_GFX_ITEM ::= GRAPHICS_D REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: depth (ignored).");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 109: // E_GFX_ITEM ::= GRAPHICS_H REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: height (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 108: // E_GFX_ITEM ::= GRAPHICS_W REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: width = " + r + "\n");
            egi.setFrameThickness(r.doubleValue());
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 107: // E_GFX_ITEM ::= GRAPHICS_Z REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: z (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 106: // E_GFX_ITEM ::= GRAPHICS_Y REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: y (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 105: // E_GFX_ITEM ::= GRAPHICS_X REAL E_GFX_ITEM
        {
            EdgeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int egileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int egiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            EdgeGraphicAttribute egi = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: x (ignored).\n");
            RESULT = egi;

            CUP$parser$result = new java_cup.runtime.Symbol(17/* E_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 104: // E_ATTR ::= CBRACE
        {
            CollectionAttribute RESULT = null;

            RESULT = new HashMapAttribute("");
            ;

            CUP$parser$result = new java_cup.runtime.Symbol(12/* E_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 103: // E_ATTR ::= GRAPHICS SBRACE E_GFX_ITEM E_ATTR
        {
            CollectionAttribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).right;
            Object k = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).value;
            int egleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int egright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            EdgeGraphicAttribute eg = (EdgeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            l.add(eg);
            // todo
            debug("TODO " + l.getId() + ";\n");
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(12/* E_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 102: // E_ATTR ::= KEYVALUE E_ATTR
        {
            CollectionAttribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute k = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            // now know it's a node; use EdgeLabelAttribute ...
            if (k instanceof LabelAttribute) {
                EdgeLabelAttribute elpa = new EdgeLabelAttribute(k.getId());
                elpa.setLabel(((LabelAttribute) k).getLabel());
                // k = elpa;
                l.add(elpa);
                // debug("E_ATTR: found LabelAttribute. " +
                // "Converted to EdgeLabelAttribute.\n");
            } else {
                l.add(k);
            }
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(12/* E_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 101: // E_ATTR ::= TARGET INTEGER E_ATTR
        {
            CollectionAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            l.add(new IntegerAttribute("target", i));
            debug("target with id " + i + " added.\n");
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(12/* E_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 100: // E_ATTR ::= SOURCE INTEGER E_ATTR
        {
            CollectionAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            l.add(new IntegerAttribute("source", i));
            debug("source with id " + i + " added.\n");
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(12/* E_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 99: // E_ATTR ::= ID INTEGER E_ATTR
        {
            CollectionAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            // l.add(new IntegerAttribute("id", i));
            // debug("edge id " + i + " ... \n");
            debug("edge id ignored \n");
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(12/* E_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 98: // N_GFX_ITEM ::= CBRACE
        {
            NodeGraphicAttribute RESULT = null;

            RESULT = (NodeGraphicAttribute) nodeStyle.copy();
            RESULT.setCoordinate(new CoordinateAttribute(
                    GraphicAttributeConstants.COORDINATE));

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 97: // N_GFX_ITEM ::= KEYVALUE N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute k = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("attribute in graphics.\n");
            try {
                ngi.add(k);
                debug("added attribute with label " + k.getId()
                        + " in graphics.\n");
            } catch (AttributeExistsException aee) {
                Attribute existsAttr = ngi.getAttribute(k.getPath());
                if (k instanceof CollectionAttribute) {
                    if (!(existsAttr instanceof CollectionAttribute)) {
                        System.err
                                .println("Attribute with ID "
                                        + k.getId()
                                        + " is a CollectionAttribute but should be a simple"
                                        + " attribute of type "
                                        + existsAttr.getClass().getName()
                                        + " ... not loaded!");
                    } else {
                        // both CollectionAttributes, check size of maps
                        Map valueToSet = (Map) k.getValue();
                        if (((Map) existsAttr.getValue()).size() > valueToSet
                                .size()) {
                            System.err
                                    .println("Attribute with ID "
                                            + k.getId()
                                            + " is a standard attribute but file does not provide"
                                            + " all sub attributes... not loaded!");
                        } else {
                            if (((Map) existsAttr.getValue()).size() < valueToSet
                                    .size()) {
                                System.err
                                        .println("Warning: Attribute with ID "
                                                + k.getId()
                                                + " is a standard attribute but file provides"
                                                + " too many sub attributes... trying to load anyway...");
                            }
                            try {
                                existsAttr.setValue(k.getValue());
                            } catch (Exception eee) {
                                System.err
                                        .println("Attribute with ID "
                                                + k.getId()
                                                + " is a standard attribute but file provides"
                                                + " unexpected / missing sub attributes... not loaded!");
                            }
                        }
                    }
                } else {
                    try {
                        existsAttr.setValue(k.getValue());
                    } catch (ClassCastException cce2) {
                        System.err.println("Attribute with ID " + k.getId()
                                + " has a different type as expected ("
                                + k.getClass().getName() + " instead of "
                                + existsAttr.getClass().getName()
                                + ") ... not loaded");
                    }
                }
                debug("attr already there, overrode value "
                        + "(if no error occurred).\n");
            }

            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 96: // N_GFX_ITEM ::= GRAPHICS_LINE SBRACE LINE_POINTS
            // N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics line (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 95: // N_GFX_ITEM ::= GRAPHICS_FONT STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: font (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 94: // N_GFX_ITEM ::= GRAPHICS_JUSTIFY STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: justify (ignored):.\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 93: // N_GFX_ITEM ::= GRAPHICS_SPLINESTEPS INTEGER
            // N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: spline steps (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 92: // N_GFX_ITEM ::= GRAPHICS_SMOOTH INTEGER N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: smooth (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 91: // N_GFX_ITEM ::= GRAPHICS_JOINSTYLE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: joinstyle (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 90: // N_GFX_ITEM ::= GRAPHICS_CAPSTYLE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: capstyle (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 89: // N_GFX_ITEM ::= GRAPHICS_ARROW STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: arrow (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 88: // N_GFX_ITEM ::= GRAPHICS_IMAGE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ImageAttribute image = new ImageAttribute("image");
            image.setReference(s);
            ngi.setBackgroundImage(image);
            debug("graphics: image set to" + s + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 87: // N_GFX_ITEM ::= GRAPHICS_BITMAP STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: bitmap (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 86: // N_GFX_ITEM ::= GRAPHICS_FOREGROUND STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("TODO: set the right foreground color.\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 85: // N_GFX_ITEM ::= GRAPHICS_BACKGROUND STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("TODO: set the right background color.\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 84: // N_GFX_ITEM ::= GRAPHICS_STYLE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: style (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 83: // N_GFX_ITEM ::= GRAPHICS_START REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: start (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 82: // N_GFX_ITEM ::= GRAPHICS_EXTENT REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: extent (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 81: // N_GFX_ITEM ::= GRAPHICS_WIDTH REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: width.\n");
            ngi.setFrameThickness(r.doubleValue());
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 80: // N_GFX_ITEM ::= GRAPHICS_ANCHOR STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: anchor (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 79: // N_GFX_ITEM ::= GRAPHICS_STIPPLE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: stripple (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 78: // N_GFX_ITEM ::= GRAPHICS_OUTLINE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: outline.\n");
            ColorAttribute outlineAttr = new ColorAttribute("outline");
            try {
                outlineAttr.setColor(Color.decode(s));
            } catch (NumberFormatException nfe) {
            }
            ngi.setFramecolor(outlineAttr);
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 77: // N_GFX_ITEM ::= GRAPHICS_FILL STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: fill \n");
            ColorAttribute fillAttr = new ColorAttribute("fill");
            try {
                fillAttr.setColor(Color.decode(s));
            } catch (NumberFormatException nfe) {
            }
            ngi.setFillcolor(fillAttr);
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 76: // N_GFX_ITEM ::= GRAPHICS_VISIBLE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: visible (ignored).\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 75: // N_GFX_ITEM ::= GRAPHICS_TYPE STRING N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;
            if (s.equals("oval")) {
                s = "org.graffiti.plugins.views.defaults.EllipseNodeShape";
            } else if (s.equals("rectangle")) {
                s = "org.graffiti.plugins.views.defaults.RectangleNodeShape";
            }
            ngi.setShape(s);
            debug("graphics: shape set to " + s + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 74: // N_GFX_ITEM ::= GRAPHICS_D REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("graphics: depth (ignored).");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 73: // N_GFX_ITEM ::= GRAPHICS_H REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ngi.getDimension().setHeight(r.doubleValue());
            debug("graphics: height set to " + r + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 72: // N_GFX_ITEM ::= GRAPHICS_W REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ngi.getDimension().setWidth(r.doubleValue());
            debug("graphics: width set to " + r + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 71: // N_GFX_ITEM ::= GRAPHICS_Z REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ngi.getCoordinate().add(new DoubleAttribute("z", r.doubleValue()));
            debug("graphics: z coord set to " + r + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 70: // N_GFX_ITEM ::= GRAPHICS_Y REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ngi.getCoordinate().setY(r.doubleValue());
            debug("graphics: y coord set to " + r + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 69: // N_GFX_ITEM ::= GRAPHICS_X REAL N_GFX_ITEM
        {
            NodeGraphicAttribute RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ngileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int ngiright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            NodeGraphicAttribute ngi = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            ngi.getCoordinate().setX(r.doubleValue());
            debug("graphics: x coord set to " + r + ".\n");
            RESULT = ngi;

            CUP$parser$result = new java_cup.runtime.Symbol(16/* N_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 68: // N_ATTR ::= CBRACE
        {
            CollectionAttribute RESULT = null;

            RESULT = new HashMapAttribute("");

            CUP$parser$result = new java_cup.runtime.Symbol(11/* N_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 67: // N_ATTR ::= GRAPHICS SBRACE N_GFX_ITEM N_ATTR
        {
            CollectionAttribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).right;
            Object k = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 3)).value;
            int ngleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int ngright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            NodeGraphicAttribute ng = (NodeGraphicAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            l.add(ng);
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(11/* N_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 66: // N_ATTR ::= KEYVALUE N_ATTR
        {
            CollectionAttribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute k = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            // now know it's a node; use NodeLabelAttribute ...
            if (k instanceof LabelAttribute) {
                NodeLabelAttribute nlpa = new NodeLabelAttribute(k.getId());
                nlpa.setLabel(((LabelAttribute) k).getLabel());
                k = nlpa;
                // debug("N_ATTR: found LabelAttribute. " +
                // "Converted to NodeLabelAttribute.\n");
            }
            l.add(k);
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(11/* N_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 65: // N_ATTR ::= ID INTEGER N_ATTR
        {
            CollectionAttribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            l.add(new IntegerAttribute("id", i));
            debug("node id " + i + " ... \n");
            RESULT = l;

            CUP$parser$result = new java_cup.runtime.Symbol(11/* N_ATTR */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 64: // E_STL_ITEM ::= CBRACE
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 63: // E_STL_ITEM ::= GRAPHICS_TYPE STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            if (s.equals("line")) {
                s = "org.graffiti.plugins.views.defaults.StraightLineEdgeShape";
            }
            edgeStyle.setShape(s);
            debug("graphics: edge style type set to " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 62: // E_STL_ITEM ::= GRAPHICS_FONT STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("graphics font (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 61: // E_STL_ITEM ::= GRAPHICS_SMOOTH INTEGER E_STL_ITEM
        {
            Object RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            edgeStyle
                    .setShape("org.graffiti.plugins.views.defaults.SmoothLineEdgeShape");
            debug("graphics: smooth (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 60: // E_STL_ITEM ::= GRAPHICS_ARROW STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("graphics arrow (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 59: // E_STL_ITEM ::= GRAPHICS_ANCHOR STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("graphics: anchor (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 58: // E_STL_ITEM ::= GRAPHICS_STIPPLE STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("graphics: stripple (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 57: // E_STL_ITEM ::= GRAPHICS_IMAGE STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            ImageAttribute image = new ImageAttribute("image");
            image.setReference(s);
            edgeStyle.setBackgroundImage(image);
            debug("graphics: image set to" + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 56: // E_STL_ITEM ::= GRAPHICS_BITMAP STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("graphics: bitmap (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 55: // E_STL_ITEM ::= GRAPHICS_FOREGROUND STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("TODO: set the right foreground color.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 54: // E_STL_ITEM ::= GRAPHICS_BACKGROUND STRING E_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("TODO: set the right background color.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(7/* E_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 53: // N_STL_ITEM ::= CBRACE
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 52: // N_STL_ITEM ::= GRAPHICS_TYPE STRING N_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            if (s.equals("oval")) {
                s = "org.graffiti.plugins.views.defaults.EllipseNodeShape";
            } else if (s.equals("rectangle")) {
                s = "org.graffiti.plugins.views.defaults.RectangleNodeShape";
            }
            nodeStyle.setShape(s);
            debug("graphics type set to " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 51: // N_STL_ITEM ::= GRAPHICS_IMAGE STRING N_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            ImageAttribute image = new ImageAttribute("image");
            image.setReference(s);
            nodeStyle.setBackgroundImage(image);
            debug("graphics: image set to" + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 50: // N_STL_ITEM ::= GRAPHICS_BITMAP STRING N_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("graphics: bitmap (ignored).\n");

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 49: // N_STL_ITEM ::= GRAPHICS_FOREGROUND STRING N_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("TODO: set the right foreground color.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 48: // N_STL_ITEM ::= GRAPHICS_BACKGROUND STRING N_STL_ITEM
        {
            Object RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            debug("TODO: set the right background color.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 47: // N_STL_ITEM ::= GRAPHICS_D REAL N_STL_ITEM
        {
            Object RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            // debug("graphics font: " + r);

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 46: // N_STL_ITEM ::= GRAPHICS_H REAL N_STL_ITEM
        {
            Object RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            nodeStyle.getDimension().setHeight(r.doubleValue());

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 45: // N_STL_ITEM ::= GRAPHICS_W REAL N_STL_ITEM
        {
            Object RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            nodeStyle.getDimension().setWidth(r.doubleValue());

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 44: // N_STL_ITEM ::= GRAPHICS_Z REAL N_STL_ITEM
        {
            Object RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            // TODO

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 43: // N_STL_ITEM ::= GRAPHICS_Y REAL N_STL_ITEM
        {
            Object RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            nodeStyle.getCoordinate().setY(r.doubleValue());

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 42: // N_STL_ITEM ::= GRAPHICS_X REAL N_STL_ITEM
        {
            Object RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            nodeStyle.getCoordinate().setX(r.doubleValue());

            CUP$parser$result = new java_cup.runtime.Symbol(6/* N_STL_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 41: // ES_ITEM ::= CBRACE
        {
            Object RESULT = null;
            debug("Rule S_ITEM CBRACE\n");
            CUP$parser$result = new java_cup.runtime.Symbol(4/* ES_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 40: // ES_ITEM ::= GRAPHICS_STYLE SBRACE GRAPHICS SBRACE
            // E_STL_ITEM CBRACE ES_ITEM
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(4/* ES_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 6)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 39: // ES_ITEM ::= KEY STRING ES_ITEM
        {
            Object RESULT = null;
            debug("Rule S_ITEM 1\n");
            CUP$parser$result = new java_cup.runtime.Symbol(4/* ES_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 38: // NS_ITEM ::= CBRACE
        {
            Object RESULT = null;
            debug("Rule S_ITEM CBRACE\n");
            CUP$parser$result = new java_cup.runtime.Symbol(5/* NS_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 37: // NS_ITEM ::= GRAPHICS_STYLE SBRACE GRAPHICS SBRACE
            // N_STL_ITEM CBRACE NS_ITEM
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(5/* NS_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 6)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 36: // NS_ITEM ::= KEY STRING NS_ITEM
        {
            Object RESULT = null;
            debug("Rule S_ITEM 1\n");
            CUP$parser$result = new java_cup.runtime.Symbol(5/* NS_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 35: // G_GFX_ITEM ::= CBRACE
        {
            List RESULT = null;

            RESULT = new LinkedList();

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 34: // G_GFX_ITEM ::= GRAPHICS_FOREGROUND STRING G_GFX_ITEM
        {
            List RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new StringAttribute("foreground", s));
            debug("grphics attribute foreground: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 33: // G_GFX_ITEM ::= GRAPHICS_BACKGROUND STRING G_GFX_ITEM
        {
            List RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new StringAttribute("background", s));
            debug("grphics attribute background: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 32: // G_GFX_ITEM ::= GRAPHICS_WIDTH REAL G_GFX_ITEM
        {
            List RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new DoubleAttribute("width", r));
            debug("grphics attribute width: " + r + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 31: // G_GFX_ITEM ::= GRAPHICS_OUTLINE STRING G_GFX_ITEM
        {
            List RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new StringAttribute("outline", s));
            debug("grphics attribute outline: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 30: // G_GFX_ITEM ::= GRAPHICS_FILL STRING G_GFX_ITEM
        {
            List RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new StringAttribute("fill", s));
            debug("grphics attribute fill: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 29: // G_GFX_ITEM ::= GRAPHICS_VISIBLE STRING G_GFX_ITEM
        {
            List RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new StringAttribute("visible", s));
            debug("grphics attribute visible: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 28: // G_GFX_ITEM ::= GRAPHICS_TYPE STRING G_GFX_ITEM
        {
            List RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new StringAttribute("type", s));
            debug("grphics attribute type: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 27: // G_GFX_ITEM ::= GRAPHICS_D REAL G_GFX_ITEM
        {
            List RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new DoubleAttribute("depth", r));
            debug("grphics attribute depth: " + r + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 26: // G_GFX_ITEM ::= GRAPHICS_H REAL G_GFX_ITEM
        {
            List RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new DoubleAttribute("height", r));
            debug("grphics attribute heigth: " + r + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 25: // G_GFX_ITEM ::= GRAPHICS_W REAL G_GFX_ITEM
        {
            List RESULT = null;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new LinkedList(l);
            RESULT.add(new DoubleAttribute("width", r));
            debug("grphics attribute width: " + r + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(15/* G_GFX_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 24: // G_LIST ::= CBRACE
        {
            List RESULT = null;

            RESULT = new LinkedList();
            debug("graph: finished subpath.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(13/* G_LIST */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 23: // G_LIST ::= G_ITEM G_LIST
        {
            List RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute k = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("rule G_LIST ... ");
            RESULT = new LinkedList(l);
            RESULT.add(k);
            debug(/* k.getValue() + */" added.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(13/* G_LIST */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 22: // G_ITEM ::= G_KEYVALUE
        {
            Attribute RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 21: // G_ITEM ::= GRAPHICS SBRACE G_GFX_ITEM
        {
            Attribute RESULT = null;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            CollectionAttribute ca = new HashMapAttribute("graphics");
            for (Iterator itr = l.iterator(); itr.hasNext();) {
                Attribute a = (Attribute) itr.next();
                if (a != null) {
                    ca.add(a);
                }
            }
            debug("graph: CollectionAttribute graphics added.\n");
            RESULT = ca;

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 20: // G_ITEM ::= KEY SBRACE G_LIST
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            List l = (List) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            CollectionAttribute ca = new HashMapAttribute(k);
            for (Iterator itr = l.iterator(); itr.hasNext();) {
                Attribute a = (Attribute) itr.next();
                ca.add(a);
            }
            debug("graph: CollectionAttribute " + k + " added.\n");
            RESULT = ca;

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 19: // G_ITEM ::= KEY STRING
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new StringAttribute(k, s);
            debug("graph: StringAttribute " + k + ": " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 18: // G_ITEM ::= KEY REAL
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Double r = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new DoubleAttribute(k, r);
            debug("graph: DoubleAttribute " + k + ": " + r + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 17: // G_ITEM ::= KEY INTEGER
        {
            Attribute RESULT = null;
            int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            String k = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            g.setInteger(k, i.intValue());
            debug("graph: attribute " + k + " set to " + i + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 16: // G_ITEM ::= CREATOR STRING
        {
            Attribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new StringAttribute("creator", s);
            debug("graph: StringAttribute creator: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 15: // G_ITEM ::= COMMENT STRING
        {
            Attribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new StringAttribute("comment", s);
            debug("graph: StringAttribute comment: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 14: // G_ITEM ::= DIRECTED INTEGER
        {
            Attribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            if (i.intValue() == 1) {
                directed = true;
            } else {
                directed = false;
            }
            // RESULT = new BooleanAttribute("directed", directed);
            g.setDirected(directed, false);
            g.setBoolean("directed", directed);
            debug("directed set to " + directed + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // G_ITEM ::= VERSION STRING
        {
            Attribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new StringAttribute("version", s);
            debug("graph: StringAttribute version: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // G_ITEM ::= VERSION INTEGER
        {
            Attribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new IntegerAttribute("version", i);
            debug("graph: IntegerAttribute version: " + i + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // G_ITEM ::= LABEL STRING
        {
            Attribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            LabelAttribute labelAttr = new LabelAttribute("label");
            labelAttr.setLabel(s);
            RESULT = labelAttr;
            debug("graph: LabelAttribute id label, " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // G_ITEM ::= NAME STRING
        {
            Attribute RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new StringAttribute("name", s);
            debug("graph: StringAttribute name: " + s + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // G_ITEM ::= ID INTEGER
        {
            Attribute RESULT = null;
            int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            RESULT = new IntegerAttribute("id", i);
            debug("graph: IntegerAttribute id: " + i + ".\n");

            CUP$parser$result = new java_cup.runtime.Symbol(9/* G_ITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // GRAPH_ELEM ::= EDGE SBRACE E_ATTR
        {
            Object RESULT = null;
            int attrleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int attrright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute attr = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("edge with attributes ...\n");
            Integer sourceId = (Integer) ((IntegerAttribute) attr
                    .getAttribute("source")).getValue();
            assert nodeMap.size() > 0 : "node map contains no elements.";
            Node source = (Node) nodeMap.get(sourceId);
            assert source != null : "source is null.";
            Integer targetId = (Integer) ((IntegerAttribute) attr
                    .getAttribute("target")).getValue();
            Node target = (Node) nodeMap.get(targetId);
            assert target != null : "target is null.";
            Edge e = g.addEdge(source, target, directed, attr);
            e.getAttributes().remove("source");
            e.getAttributes().remove("target");
            try {
                e.getAttributes().getAttribute("graphics");
            } catch (AttributeNotFoundException anfe) {
                EdgeGraphicAttribute ega = (EdgeGraphicAttribute) edgeStyle
                        .copy();
                e.addAttribute(ega, "");
            }
            debug("edge added to the graph.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(3/* GRAPH_ELEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // GRAPH_ELEM ::= NODE SBRACE N_ATTR
        {
            Object RESULT = null;
            int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).left;
            int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).right;
            CollectionAttribute l = (CollectionAttribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 0)).value;

            debug("node with attributes ...\n");
            Node n = g.addNode(l);
            Integer i = (Integer) ((IntegerAttribute) n.getAttribute("id"))
                    .getValue();
            nodeMap.put(i, n);
            n.getAttributes().remove("id");
            try {
                n.getAttributes().getAttribute("graphics");
            } catch (AttributeNotFoundException anfe) {
                NodeGraphicAttribute nga = (NodeGraphicAttribute) nodeStyle
                        .copy();
                nga.setCoordinate(new CoordinateAttribute(
                        GraphicAttributeConstants.COORDINATE));
                n.addAttribute(nga, "");
            }
            debug("node added to the graph.\n");

            CUP$parser$result = new java_cup.runtime.Symbol(3/* GRAPH_ELEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // GRAPHITEM ::= CBRACE
        {
            Object RESULT = null;
            debug("Rule GRAPHITEM 6\n");
            CUP$parser$result = new java_cup.runtime.Symbol(2/* GRAPHITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // GRAPHITEM ::= GRAPH_ELEM GRAPHITEM
        {
            Object RESULT = null;

            CUP$parser$result = new java_cup.runtime.Symbol(2/* GRAPHITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // GRAPHITEM ::= EDGE_STYLE SBRACE ES_ITEM GRAPHITEM
        {
            Object RESULT = null;
            debug("Rule GRAPHITEM 3\n");
            CUP$parser$result = new java_cup.runtime.Symbol(2/* GRAPHITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // GRAPHITEM ::= NODE_STYLE SBRACE NS_ITEM GRAPHITEM
        {
            Object RESULT = null;
            debug("Rule GRAPHITEM 2\n");
            CUP$parser$result = new java_cup.runtime.Symbol(2/* GRAPHITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 3)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // GRAPHITEM ::= G_ITEM GRAPHITEM
        {
            Object RESULT = null;
            int gileft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int giright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Attribute gi = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;

            if (gi != null) {
                g.addAttribute(gi, "");
                debug("attribute " + gi.getPath() + " with value "
                        + gi.getValue() + " added to the graph.\n");
            }

            CUP$parser$result = new java_cup.runtime.Symbol(2/* GRAPHITEM */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= GML EOF
        {
            Object RESULT = null;
            int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            RESULT = start_val;
            CUP$parser$result = new java_cup.runtime.Symbol(0/* $START */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 1)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // GML ::= GRAPH SBRACE GRAPHITEM
        {
            Object RESULT = null;
            debug("Rule GML\n");
            CUP$parser$result = new java_cup.runtime.Symbol(1/* GML */,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 2)).left,
                    ((java_cup.runtime.Symbol) CUP$parser$stack
                            .elementAt(CUP$parser$top - 0)).right, RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
